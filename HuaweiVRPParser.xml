<eventParser name="HuaweiVRPParser">
  <deviceType>
    <Vendor>Huawei</Vendor>
    <Model>VRP</Model>
    <Version>ANY</Version>
  </deviceType>

  <!--
        <188>Apr 13 2008 08:39:59 SH-ABC-SW1 %%01SHELL/4/TELNETFAILED(l): Login through telnet failed( ip=192.168.20.36 times=1).
        -->

  <!-- pattern definitions -->
  <patternDefinitions>
    <pattern name="patHuaweiVRPMod" list="begin"><![CDATA[6OVER4|AAA|ACL|ACL6|ACLE|ACM|ACTIVE|ADA|ADDR|ALML|ANCP|APS|ARP|ARPBAS|ARPLINK|ARPRRSEPA|ATM|BFD|BGP|BULKSTAT|CFM|CHAT|CHECK|CLK|CMD|CONTROL-VLAN|CSPF|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="continue"><![CDATA[DC|DEFD|DEFEND|DESCRIPTION|DHCP|DHCPACC|DHCPR|DHCPS|DHCPSNP|DISPLAY|DLDP|DOMAIN|DRV|DSMS|EFM|ENTEXT|ENTMIB|EOAM1AG|ETH|ETRUNK|FIB|FILTER|FLD|FPI|FR|FSP|FTPS|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="continue"><![CDATA[GRE|GTL|GTSM|HA|HGMP|HWCM|IFNET|IGMP|IMS|INFO|INTRA|IP|IP6TOKEN|IPC|IPRAN|IPV4-IPV6|IPV6FIBAGENT|IPV6PP|IPV6TCP|ISIS|ISSU|KEYCH|KEYCHAIN|Keychain|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="continue"><![CDATA[L2ADP|L2IF|L2MC|L2MCADP|L2TP|L2V|L3AD|L3ADA|L3VPN|L3VPN6|LACP|LAM|LDP|LDT|LINE|LLDP|LOAD|LSPAGENT|LSPC|LSPM|MAC-LIMIT|MBUF|MCAST|MD|MEM|MEP|MFIB|MLD|MODEM|MRM|MSDP|MSTP|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="continue"><![CDATA[NAP|NATPT|ND|NE5KQOS|NETCONF|NETSTREAM|NQA|NSADP|NTP|OAM|OAMMGR|OSPF|OSPFV3|PAF|PATCH|PDF|PES|PHY|PICK|PIM|PING|PORTSWITCH|PPP|PREFACE|PTP|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="continue"><![CDATA[QINQ|QOS|QOSADA|QinQ|QoS|QoS_log|RDS|REMOTE-MEP|RESET|RESTART|RING|RIP|RIPNG|RIPng|RM|RMON|RMON2|RPR|RRPP|RSA|RSVP|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="continue"><![CDATA[SEC|Sec|SECAPP|SECE|SEP|SEP-SEGMENT|SET|SHELL|SHUTDOWN|SINDEX|SMLK|SNMP|SNOOPING|SNPG|SOCKET|SRM|SSH|STARTUP|STAT|STP|SYSMIB|]]></pattern>
    <pattern name="patHuaweiVRPMod" list="end"><![CDATA[TAC|TAD|TELNET|TFTP|TNLM|TRACE|TRAFSTAT|TRUNK|TUNN|TUNNEL|TUNN_PS|Trunk|UCM|USERLOG|VFS|VLAN|VOS|VOSCPU|VOSMEM|VRRP|VTRUNK|VTY|CM|DS|HRP|HTTPD|POLICY]]></pattern>
    <pattern name="patComm"><![CDATA[[^,]+]]></pattern>
    <pattern name="patUpDown"><![CDATA[up|down]]></pattern>
    <pattern name="patHostName"><![CDATA[[^\s,]+]]></pattern>
  </patternDefinitions>

  <eventFormatRecognizer><![CDATA[(?:<:gPatMon>\s+<:gPatDay>\s+<:gPatYear>|<:gPatYear>-<:gPatMonNum>-<:gPatDay>)\s+<:gPatTime>\s+<:gPatStr>\s+(?:%%<:gPatInt>)?<:patHuaweiVRPMod>/<:gPatInt>/<:gPatWord>]]></eventFormatRecognizer>

  <testEvents>
    <testEvent><![CDATA[<188>Apr 13 2008 08:39:59 SH-abc-SW1 %%01SHELL/4/TELNETFAILED(l): Login through telnet failed( ip=192.168.20.36 times=1).]]></testEvent>
    <testEvent><![CDATA[<190>Apr 13 2008 19:27:43 SH-abc-SW1 %%01DRV/6/LINKDOWN(l): Port Ethernet0/0/3 is down because the link layer is down.]]></testEvent>
    <testEvent><![CDATA[<187>Apr 14 2008 00:01:06 SH-abc-SW1 %%01FIB/3/REFRESH_END(l): FIB refreshing end, the refresh group map is 0!]]></testEvent>
    <testEvent><![CDATA[<190>2016-06-14 08:47:27 ZWWW-abc-MASTER %%01SHELL/6/DISPLAY_CMDRECORD(l): task:vt0 ip:10.1.1.1 user:admin usertype:4 vsys:root command:display firewall statistic system inner.]]></testEvent>
    <testEvent><![CDATA[<188>2016-06-14 09:01:08 ZWWW-abc-MASTER %%01SHELL/4/LOGOUT(l): access type:ssh vsys:root user:admin logout from 10.1.1.1]]></testEvent>
    <testEvent><![CDATA[<188>2016-06-14 08:45:57 ZWWW-abc-MASTER %%01HTTPD/4/OUT(l): User mygsxj(IP:192.1.1.1 ID:235) logout]]></testEvent>
    <testEvent><![CDATA[<188>2016-06-14 08:49:14 ZWWW-abc-MASTER %%01HRP/4/CFGCHECK(l): HRP checks the local and the remote devices, and the result is Different Configuration.]]></testEvent>
    <testEvent><![CDATA[<189>2016-06-14 08:55:16 ZWWW-abc-MASTER %%01SEC/5/STREAM(l): In last five minutes connection statistic is: Normal closed = 698393, Unsuccessfully closed = 89776, Policy rejected = 0, Route rejected = 0, Blacklist rejected = 0.]]></testEvent>
    <testEvent><![CDATA[<188>2016-06-14 09:01:08 ZWWW-abc-MASTER %%01HWCM/4/EXIT(l):  The user admin exit from configure mode.]]></testEvent>
    <testEvent><![CDATA[<188>2016-06-14 09:03:49 ZWWW-abc-MASTER %%01NTP/4/CLOCK_UPDATE(l): The system clock successfully updated from 09:03:49.935 UTC Jun 14 2016(DB0A46F5.EF65DBFC) to 09:03:49.128 UTC Jun 14 2016(DB0A46F5.2103826B).]]></testEvent>
  </testEvents>

  <parsingInstructions>
    <!-- parsing common fields -->
    <collectFieldsByRegex src="$_rawmsg">
      <regex><![CDATA[<:gPatSyslogPRI>?<_header:gPatMesgBody> (?:%%<:gPatInt>)?<_evIdPrefix:patHuaweiVRPMod>/<_severity:gPatInt>/<_evIdSuffix:gPatWord>(?:\(<:gPatStr>\))?(?:\[<:gPatStr>\])?:\s*<_body:gPatMesgBody>]]></regex>
    </collectFieldsByRegex>
    <setEventAttribute attr="eventType">combineMsgId("VRP-", $_evIdPrefix, "-", $_evIdSuffix)</setEventAttribute>
    <setEventAttribute attr="eventSeverity">1</setEventAttribute>
    <!-- parse header -->
    <switch>
      <case>
        <collectFieldsByRegex src="$_header">
          <regex><![CDATA[<_mon:gPatMon>\s+<_day:gPatDay>\s+<_year:gPatYear>\s+<_time:gPatTime>\s+<reptDevName:gPatMesgBody>]]></regex>
        </collectFieldsByRegex>
        <setEventAttribute attr="hostName">$reptDevName</setEventAttribute>
        <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time)</setEventAttribute>
      </case>
      <case>
        <collectFieldsByRegex src="$_header">
          <regex><![CDATA[<_year:gPatYear>-<_mon:gPatMonNum>-<_day:gPatDay>\s+<_time:gPatTime>\s+<reptDevName:gPatMesgBody>]]></regex>
        </collectFieldsByRegex>
        <setEventAttribute attr="hostName">$reptDevName</setEventAttribute>
        <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time)</setEventAttribute>
      </case>
      <default/>
    </switch>

    <setEventAttribute attr="eventAction">0</setEventAttribute>
    <!-- event severity -->
    <choose>
      <when test="$_severity IN '5, 6, 7'">
        <setEventAttribute attr="eventSeverity">1</setEventAttribute>
      </when>
      <when test="$_severity = '0'">
        <setEventAttribute attr="eventSeverity">10</setEventAttribute>
      </when>
      <when test="$_severity = '1'">
        <setEventAttribute attr="eventSeverity">8</setEventAttribute>
      </when>
      <when test="$_severity IN '2, 3'">
        <setEventAttribute attr="eventSeverity">5</setEventAttribute>
      </when>
      <when test="$_severity = '4'">
        <setEventAttribute attr="eventSeverity">3</setEventAttribute>
      </when>
    </choose>

    <!-- message specific parsing -->
    <choose>
      <!-- TODO-rui: event category -->

      <!--
     <188>2016-06-14 09:01:08 ZWWW-ZG-FW-MASTER %%01HWCM/4/EXIT(l):  The user admin exit from configure mode.
    -->
      <when test="$eventType = 'VRP-HWCM-EXIT'">
        <switch>
          <case>
            <collectAndSetAttrByRegex src="$_body">
              <regex><![CDATA[The\s+user\s+<user:gPatStr>\s+exit\s+from\s+<module:gPatStr>\s+mode]]></regex>
            </collectAndSetAttrByRegex>
          </case>
          <default/>
        </switch>
      </when>

      <!--
     <188>2016-06-14 08:45:57 ZWWW-ZG-FW-MASTER %%01HTTPD/4/OUT(l): User mygsxj(IP:59.231.145.105 ID:235) logout
     <188>2016-06-14 08:49:14 ZWWW-ZG-FW-MASTER %%01HRP/4/CFGCHECK(l): HRP checks the local and the remote devices, and the result is Different Configuration.-->
      <when test="$eventType = 'VRP-HTTPD-OUT'">
        <switch>
          <case>
            <collectAndSetAttrByRegex src="$_body">
              <regex><![CDATA[User\s+<user:gPatStrLeftParen>\s*\(IP:\s*<srcIpAddr:gPatIpAddr>\s+ID:<:gPatInt>\s*\)\s*logout]]></regex>
            </collectAndSetAttrByRegex>
          </case>
          <default/>
        </switch>
      </when>
      <when test="$eventType = 'VRP-HRP-CFGCHECK'">
        <setEventAttribute attr="msg">$_body</setEventAttribute>
      </when>
      <when test="$eventType = 'VRP-SHELL-LOGIN'">
        <switch>
          <case>
            <!--
            <189>Apr 13 2008 18:42:07 SH-abc-SW1 %%01SHELL/5/LOGIN(l):  admin login from 10.1.20.21.
           -->
            <collectAndSetAttrByRegex src="$_body">
              <regex><![CDATA[<user:gPatStr>\s+<_action:gPatStr>\s+from\s+<srcIpAddr:gPatIpAddr>]]></regex>
            </collectAndSetAttrByRegex>
          </case>
          <case>
            <collectFieldsByRegex src="$_body">
              <regex><![CDATA[^The\s+user\s+succeeded\s+in\s+logging\s+in\s+to\s+<:gPatMesgBodyMin>\.\s+\(UserType=<:gPatMesgBodyMin>,\s*UserName=<user:gPatStr>,\s+Ip=<_hostIpAddr:gPatStr>,]]></regex>
            </collectFieldsByRegex>
            <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
              <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
            </when>
          </case>
        </switch>
      </when>

      <when test="$eventType = 'VRP-SHELL-LOGOUT'">
        <switch>
          <case>
            <collectFieldsByRegex src="$_body">
              <regex><![CDATA[^The\s+user\s+succeeded\s+in\s+logging\s+out\s+of\s+<:gPatMesgBodyMin>\.\s*\(UserType=<:gPatMesgBodyMin>,\s+UserName=<user:gPatStr>,\s+Ip=<_hostIpAddr:gPatStr>,]]></regex>
            </collectFieldsByRegex>
            <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
              <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
            </when>
          </case>

          <case>
            <!--
              <188>2016-06-14 09:01:08 ZWWW-ZG-FW-MASTER %%01SHELL/4/LOGOUT(l): access type:ssh vsys:root user:admin logout from 10.1.1.1
           -->
            <collectAndSetAttrByRegex src="$_body">
              <regex><![CDATA[access\s+type:<loginType:gPatStr>\s+vsys:<_vsys:gPatStr>\s+user:\s*<user:gPatStr>\s+<_action:gPatStr>\s+from\s+<srcIpAddr:gPatIpV4Dot>]]></regex>
            </collectAndSetAttrByRegex>
          </case>
          <case>
            <!--
              <189>Apr 13 2008 18:41:43 SH-abc-SW1 %%01SHELL/5/LOGOUT(l):  admin logout from 10.1.20.21.
           -->
            <collectAndSetAttrByRegex src="$_body">
              <regex><![CDATA[<user:gPatStr>\s+<_action:gPatStr>\s+from\s+<srcIpAddr:gPatIpV4Dot>]]></regex>
            </collectAndSetAttrByRegex>
          </case>
          <default/>
        </switch>
      </when>

      <when test="$eventType = 'VRP-SHELL-TIMEOUT'">
        <!--
      <189>Apr 13 2008 17:56:23 SH-abc-SW1 %%01SHELL/5/TIMEOUT(l):  admin login from 192.168.26.10 is time out.
          -->
        <collectAndSetAttrByRegex src="$_body">
          <regex><![CDATA[<user:gPatStr>\s+<_action:gPatStr>\s+from\s+<srcIpAddr:gPatIpAddr>\s]]></regex>
        </collectAndSetAttrByRegex>
      </when>

      <when test="$eventType = 'VRP-SHELL-TELNETFAILED'">
        <!--
      <188>Apr 13 2008 18:12:30 SH-abc-SW1 %%01SHELL/4/TELNETFAILED(l): Login through telnet failed( ip=10.1.20.21 times=1).
          -->
        <collectAndSetAttrByRegex src="$_body">
          <regex><![CDATA[^Login\s+through\s+<appTransportProto:gPatStr>\s+failed\(\s+ip=<srcIpAddr:gPatIpAddr>\s+times=<_count:gPatInt>\)]]></regex>
        </collectAndSetAttrByRegex>
        <setEventAttribute attr="eventAction">1</setEventAttribute>
        <when test="$_count = '3'">
          <setEventAttribute attr="eventSeverity">5</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SHELL-AUTHCMDNONEED'">
        <!--
      <189>Apr 13 2008 18:01:43 SH-abc-SW1 %%01SHELL/5/AUTHCMDNONEED(l): 'User admin doesn't need command authorization.' from 10.1.20.21 by VTY.
          -->
        <collectAndSetAttrByRegex src="$_body">
          <regex><![CDATA[^'User\s+<user:gPatStr>\s+doesn't\s+need\s+command\s+authorization\.'\s+from\s+<srcIpAddr:gPatIpAddr>\s+by\s+<_user:gPatStr>\.]]></regex>
        </collectAndSetAttrByRegex>
      </when>

      <when test="$eventType = 'VRP-SHELL-CMDRECORD'">
        <switch>
          <!--
          <189>Apr 13 2008 18:01:35 SH-abc-SW1 %%01SHELL/5/CMDRECORD(l): task: vt0 ip: 10.1.20.21 user: admin command: quit.
          -->
          <case>
            <collectAndSetAttrByRegex src="$_body">
              <regex><![CDATA[^task:\s+<_taskName:gPatStr>\s+ip:\s+<srcIpAddr:gPatIpAddr>\s+user:\s+<user:gPatStr>\s+command:\s+<command:gPatMesgBody>\.]]></regex>
            </collectAndSetAttrByRegex>
          </case>
          <case>
            <collectFieldsByRegex src="$_body">
              <regex><![CDATA[^Record\s+command\s+information\.\s+\(Task=<task:gPatStr>,\s+Ip=<_hostIpAddr:gPatStr>,\s*User=<user:gPatStr>,\s+Command="<command:gPatMesgBodyMin>"]]></regex>
            </collectFieldsByRegex>
            <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
              <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
            </when>
          </case>
        </switch>
      </when>

      <when test="$eventType = 'VRP-SHELL-DISPLAY_CMDRECORD'">
        <switch>
          <case>
            <collectFieldsByRegex src="$_body">
              <regex><![CDATA[^Record\s+display\s+command\s+information\.\s+\(Task=<task:gPatStr>,\s*Ip=<_hostIpAddr:gPatStr>,\s+User=<user:gPatStr>,\s+Command="<command:gPatMesgBodyMin>"]]></regex>
            </collectFieldsByRegex>
            <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
              <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
            </when>
          </case>
          <!--
          <190>2016-06-14 08:47:27 ZWWW-ZG-FW-MASTER %%01SHELL/6/DISPLAY_CMDRECORD(l): task:vt0 ip:10.1.1.1 user:admin usertype:4 vsys:root command:display firewall statistic system inner.
          <190>Apr 13 2008 18:01:28 SH-abc-SW1 %%01SHELL/6/DISPLAY_CMDRECORD(l): task: vt0 ip: 10.1.20.21 user: admin command: display version.
          -->
          <case>
            <setEventAttribute attr="_body">replaceStringByRegex($_body, ":\s+", ":")</setEventAttribute>
            <collectFieldsByKeyValuePair sep=" " kvsep=":" src="$_body">
              <attrKeyMap attr="_taskName" key="task"/>
              <attrKeyMap attr="srcIpAddr" key="ip"/>
              <attrKeyMap attr="user" key="user"/>
              <attrKeyMap attr="userType" key="usertype"/>
              <attrKeyMap attr="_sys" key="vsys"/>
              <attrKeyMap attr="command" key="command"/>
            </collectFieldsByKeyValuePair>
            <!--<collectAndSetAttrByRegex src="$_body">
             <regex><![CDATA[^task:\s+<_taskName:gPatStr>\s+ip:\s+<srcIpAddr:gPatIpV4Dot>\s+user:\s+<user:gPatStr>(?:\s+usertype:<userType:gPatStr>\s+vsys:<:>)?\s+command:\s+<command:gPatMesgBody>\.]]></regex>
            </collectAndSetAttrByRegex>-->
          </case>
          <default/>
        </switch>
      </when>

      <when test="$eventType = 'VRP-POLICY-POLICYPERMIT'">
        <!-- <190>Sep 23 2019 07:45:06 A-FW-01 %%01POLICY/6/POLICYPERMIT(l):vsys=public, protocol=17, source-ip=192.168.1.10, source-port=63330, destination-ip=10.10.1.7, destination-port=53, time=2019/9/23 10:45:06, source-zone=trust, destination-zone=untrust, rule-name=dns.local.to.untrust. -->
        <collectFieldsByKeyValuePair kvsep="=" sep=", " src="$_body">
          <attrKeyMap attr="virtualHostName" key="vsys"/>
          <attrKeyMap attr="appTransportProto" key="protocol"/>
          <attrKeyMap attr="srcIpAddr" key="source-ip"/>
          <attrKeyMap attr="srcIpPort" key="source-port"/>
          <attrKeyMap attr="destIpAddr" key="destination-ip"/>
          <attrKeyMap attr="destIpPort" key="destination-port"/>
          <attrKeyMap attr="srcFwZone" key="source-zone"/>
          <attrKeyMap attr="destFwZone" key="destination-zone"/>
          <attrKeyMap attr="ruleName" key="rule-name"/>
        </collectFieldsByKeyValuePair>
      </when>

      <when test="$eventType IN 'VRP-DRV-LINKUP, VRP-DRV-LINKDOWN'">
        <!--
      <190>Apr 13 2008 19:27:43 SH-abc-SW1 %%01DRV/6/LINKDOWN(l): Port Ethernet0/0/3 is down because the link layer is down.
      <190>Apr 13 2008 19:28:20 SH-abc-SW1 %%01DRV/6/LINKUP(l): Port Ethernet0/0/3 is up because the link layer is up.
          -->
        <collectAndSetAttrByRegex src="$_body">
          <regex><![CDATA[^Port\s+<srcIntfName:gPatStr>\s+is\s+<_action:gPatStr>\s+because\s+the\s+link\s+layer\s+is\s+<_action2:gPatStr>\.]]></regex>
        </collectAndSetAttrByRegex>
        <when test="$_action = 'down'">
          <setEventAttribute attr="eventSeverity">3</setEventAttribute>
          <setEventAttribute attr="eventAction">1</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-IFNET-UPDOWN'">
        <!--
      <188>Apr 13 2008 19:27:43 SH-abc-SW1 %%01IFNET/4/UPDOWN(l): The state of interface Ethernet0/0/3 was changed to DOWN.
      <188>Apr 13 2008 19:28:23 SH-abc-SW1 %%01IFNET/4/UPDOWN(l): The state of interface Ethernet0/0/3 was changed to UP.
          -->
        <collectAndSetAttrByRegex src="$_body">
          <regex><![CDATA[^The\s+state\s+of\s+interface\s+<srcIntfName:gPatStr>\s+was\s+changed\s+to\s+<_action:gPatStr>\.]]></regex>
        </collectAndSetAttrByRegex>
        <choose>
          <when test="$_action = 'UP'">
            <setEventAttribute attr="eventType">combineMsgId("VRP-", $_evIdPrefix, "-", $_evIdSuffix, "-", "TO-UP")</setEventAttribute>
          </when>
          <when test="$_action = 'DOWN'">
            <setEventAttribute attr="eventType">combineMsgId("VRP-", $_evIdPrefix, "-", $_evIdSuffix, "-", "TO-DOWN")</setEventAttribute>
            <setEventAttribute attr="eventAction">1</setEventAttribute>
          </when>
        </choose>
      </when>

      <when test="$eventType IN 'VRP-FIB-REFRESH_START, VRP-FIB-REFRESH_END'">
        <!--
      <187>Apr 14 2008 00:01:03 SH-abc-SW1 %%01FIB/3/REFRESH_START(l): FIB refreshing start, the refresh group map is 4294967295!
      <187>Apr 14 2008 00:01:06 SH-abc-SW1 %%01FIB/3/REFRESH_END(l): FIB refreshing end, the refresh group map is 0!
          -->
        <collectAndSetAttrByRegex src="$_body">
          <regex><![CDATA[^FIB\s+refreshing\s+<_action:gPatStr>,\s+the\s+refresh\s+group\s+map\s+is\s+<_groupMap:gPatInt>!]]></regex>
        </collectAndSetAttrByRegex>
      </when>

      <when test="$eventType = 'VRP-6OVER4-MAXNUM_UNCAMP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+tunnels\s+<:gPatMesgBodyMin>\s+configured\s+on\s+the\s+old\s+main\s+control\s+board\s+is\s+greater\s+than\s+the\s+maximum\s+number\s+of\s+tunnels\s+<:gPatMesgBodyMin>\s+that\s+can\s+be\s+configured\s+on\s+the\s+new\s+main\s+control\s+board\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_UNLOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_LOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_MODIFY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_DEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_EXPIRED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_MODIFYPWD_UNLOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+password\s+of\s+local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-AAA-LOCAL_ACCOUNT_MODIFYPWD_LOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+password\s+of\s+local\s+account\s+<accountName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ACLE-ACLLOG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<:gPatMesgBodyMin>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ADDR-COLLISION_CNT_EXCEED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Collision\s+count\s+reached\s+maximum\s+value\s+for\s+IPv6\s+CGA\s+address\s+<_hostIpAddr:gPatStr>\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-APS-DEFECT_NOTIFY_PFM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Defect\s+changed\s+failed\s+to\s+notify\s+plat\.\s*\(EventType=<:gPatMesgBodyMin>,\s+MoudleID=<:gPatMesgBodyMin>,\s+GroupIndex=<:gPatMesgBodyMin>,\s*WorkingProtectionMiss=<:gPatMesgBodyMin>,\s+LocalSMissFarBFlag=<:gPatMesgBodyMin>,\s*ProtectionModeMiss=<:gPatMesgBodyMin>,\s+RevertiveModeMiss=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-APS-PKT_PLAT_TO_PPI'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Plat\s+send\s+packet\s+templet\s+to\s+adapter\s+failed\.\s*\(ModuleID=<:gPatMesgBodyMin>,\s+ProtectionID=<:gPatMesgBodyMin>,\s+APSFastSndInterval=<:gPatMesgBodyMin>,\s*WtrTime=<:gPatMesgBodyMin>,\s+HoldOffTimeInterval=<:gPatMesgBodyMin>,\s+ProtectionEnable=<:gPatMesgBodyMin>,\s*APSPktFlag=<:gPatMesgBodyMin>,\s+ProtectionMode=<:gPatMesgBodyMin>,\s+ProtectionDirection=<:gPatMesgBodyMin>,\s*RevertiveMode=<:gPatMesgBodyMin>,\s+LocalState=<:gPatMesgBodyMin>,\s+GlobalState=<:gPatMesgBodyMin>,\s*APSState=<:gPatMesgBodyMin>,\s+LocalSelector=<:gPatMesgBodyMin>,\s+LocalBridge=<:gPatMesgBodyMin>,\s*SwitchCommand=<:gPatMesgBodyMin>,\s+WorkingLinkState=<:gPatMesgBodyMin>,\s+ProtectionLinkState=<:gPatMesgBodyMin>,\s*ProtectionProtocol=<:gPatMesgBodyMin>,\s+StatusSlot=<hwSlot:gPatStr>,\s+WorkingLinkManageState=<:gPatMesgBodyMin>,\s*ProtectionLinkManageState=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-APS-STATE_NOTIFY_PFM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^State\s+changed\s+failed\s+to\s+notify\s+plat\.\s+\(EventType=<:gPatMesgBodyMin>,\s*MoudleID=<:gPatMesgBodyMin>,\s+GroupIndex=<:gPatMesgBodyMin>,\s+ProtectionType=<:gPatMesgBodyMin>,\s*LocalState=<:gPatMesgBodyMin>,\s+WorkingLinkState=<:gPatMesgBodyMin>,\s+ProtectionLinkState=<:gPatMesgBodyMin>,\s*LocalAPSRequest=<:gPatMesgBodyMin>,\s+LocalRequestedSignal=<:gPatMesgBodyMin>,\s*LocalBridgedSignal=<:gPatMesgBodyMin>,\s+FarEndRequest=<:gPatMesgBodyMin>,\s+FarABit=<:gPatMesgBodyMin>,\s*FarBBit=<:gPatMesgBodyMin>,\s+FarDBit=<:gPatMesgBodyMin>,\s+FarRBit=<:gPatMesgBodyMin>,\s*FarEndRequestedSignal=<:gPatMesgBodyMin>,\s+FarEndBridgedSignal=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-APS-STATE_NOTIFY_PPI'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^State\s+changed\s+failed\s+to\s+notify\s+ppi\.\s+\(EventType=<:gPatMesgBodyMin>,\s*MoudleID=<:gPatMesgBodyMin>,\s+ProtectionID=<:gPatMesgBodyMin>,\s+WorkingLinkIndex=<:gPatMesgBodyMin>,\s*ProntectionLinkIndex=<:gPatMesgBodyMin>,\s+HoldoffTime=<:gPatMesgBodyMin>,\s+WTRTime=<:gPatMesgBodyMin>,\s*FastSndInterval=<:gPatMesgBodyMin>,\s+ProtectionMode=<:gPatMesgBodyMin>,\s+ProtectionDirection=<:gPatMesgBodyMin>,\s*RevertiveMode=<:gPatMesgBodyMin>,\s+SwitchState=<:gPatMesgBodyMin>,\s+OldGlobalState=<:gPatMesgBodyMin>,\s*SwitchResult=<:gPatMesgBodyMin>,\s+ProtectionEnableFlag=<:gPatMesgBodyMin>,\s+SwitchCommand=<:gPatMesgBodyMin>,\s*WorkingLinkState=<:gPatMesgBodyMin>,\s+ProtectionLinkState=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-APS-SYN_MES_IO_TO_MAIN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IO\s+board\s+synchronization\s+message\s+to\s+main\s+board\s+failed\.\s*\(Mid=<:gPatMesgBodyMin>,\s+GroupIndex=<:gPatMesgBodyMin>,\s+SwitchRequest=<:gPatMesgBodyMin>,\s*DefectDirection=<:gPatMesgBodyMin>,\s+StatusSlot=<hwSlot:gPatStr>,\s+SourceSlot=<hwSlot:gPatStr>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-APS-SYN_MES_MAIN_TO_IO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Main\s+board\s+synchronization\s+message\s+to\s+IO\s+board\s+failed\.\s*\(Mid=<:gPatMesgBodyMin>,\s+GroupIndex=<:gPatMesgBodyMin>,\s+SwitchRequest=<:gPatMesgBodyMin>,\s*DefectDirection=<:gPatMesgBodyMin>,\s+StatusSlot=<hwSlot:gPatStr>,\s+SourceSlot=<hwSlot:gPatStr>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ARP-ARP_LOG_CONFIRM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+chose\s+<:gPatMesgBodyMin>\s+when\s+deciding\s+whether\s+to\s+execute\s+the\s+command\s+"<command:gPatMesgBodyMin>"]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ARP-ARP_LOG_DUPLICATE_IPADDR_DETECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Detected\s+an\s+IP\s+address\s+collision\.\s*\(IpAddress=<_hostIpAddr:gPatStr>,\s+LocalMacAddress=<:gPatMesgBodyMin>,\s*LocalInterfaceName=<intfName:gPatStr>,\s+LocalVlanId=<hostVLAN:gPatInt>,\s*ReceiveMacAddress=<:gPatMesgBodyMin>,\s*ReceiveInterfaceName=<intfName:gPatStr>,\s+ReceiveVlanId=<hostVLAN:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-ARP-ARP_DUPLICATE_IPADDR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+an\s+ARP\s+packet\s+with\s+a\s+duplicate\s+IP\s+addressfrom\s+the\s+interface\.\s+\(IpAddress=<_hostIpAddr:gPatStr>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-ARPLINK-ARPLINK_DELETE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+IP\s+address\s+of\s+the\s+interface\s+has\s+been\s+changed,\s+and\s+the\s+ARP\s+link\s+has\s+been\s+deleted\.\s+\(InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ASSISTANT-ASSISTANTSCHEDULE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^To\s+record\s+assistant\s+schedule\s+information\.\s*\(TaskName=<task:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-ADDFSM_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+failed\s+to\s+add\s+session\s+status\s+machine\s+table!\(SlotNumber=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-ADDRCV_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+failed\s+to\s+add\s+session\s+receival\s+table!\s+\(SlotNumber=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-CRTSESS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+BFD\s+session\s+has\s+been\s+created\s+successfully\.\s+\(Discriminator=<:gPatMesgBodyMin>,\s*ConfigurationName=<:gPatMesgBodyMin>,\s+Applications=<appName:gPatStr>,\s+PeerIp=<:gPatStr>,\s*SessionType=<:gPatMesgBodyMin>,\s+BindIFName=<:gPatMesgBodyMin>,\s+BindVpnName=<:gPatMesgBodyMin>,\s*SourceIp=<srcIpAddr:gPatIpV4Dot>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-DELFSM_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+failed\s+to\s+delete\s+session\s+status\s+machine\s+table!\(SlotNumber=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-DELRCV_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+failed\s+to\s+delete\s+session\s+receival\s+entry!\s+\(SlotNumber=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-DELRCV_ERR_ADD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+failed\s+to\s+delete\s+session\s+receival\s+entry\s+when\s+adding\s+session!\s+\(SlotNumber=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-DELSESS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+BFD\s+session\s+was\s+deleted\.\s+\(Discriminator=<:gPatMesgBodyMin>,\s*Result=<:gPatMesgBodyMin>,\s+Applications=<appName:gPatStr>,\s+BindIFName=<:gPatMesgBodyMin>,\s+SourceIp=<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-IO_REACH_SESSLMT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+sessions\s+on\s+the\s+slot\s+had\s+reached\s+upper\s+limit,\s+new\s+session\s+bound\s+on\s+this\s+interface\s+board\s+could\s+not\s+be\s+created!\s+\(SlotNumber=<hwSlot:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-MEMORYALLOCFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+allocate\s+memory\s+when\s+process\s+<procId:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-REALTIME_CFG_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+backup\s+the\s+configuration\s+entry\s+in\s+realtime!\(BfdName=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-STACHG_DWNTOUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^BFD\s+session\s+changed\s+from\s+Down\s+to\s+Up\.\s*\(SlotNumber=<hwSlot:gPatStr>,\s+Discriminator=<:gPatMesgBodyMin>,\s+Applications=<appName:gPatStr>,\s*BindInterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-STACHG_TODWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^BFD\s+session\s+changed\s+to\s+Down\.\s+\(SlotNumber=<hwSlot:gPatStr>,\s*Discriminator=<:gPatMesgBodyMin>,\s+Diagnostic=<:gPatMesgBodyMin>,\s+Applications=<appName:gPatStr>,\s*ProcessPST=<:gPatMesgBodyMin>,\s+BindInterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BFD-STACHG_TOUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^BFD\s+session\s+changed\s+to\s+Up\.\s+\(SlotNumber=<hwSlot:gPatStr>,\s*Discriminator=<:gPatMesgBodyMin>,\s+FormerStatus=<:gPatMesgBodyMin>,\s+Applications=<appName:gPatStr>,\s*BindInterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BGP-RECV_NOTIFY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+router\s+received\s+NOTIFICATION\s+message\s+from\s+peer\s+<:gPatMesgBodyMin>\.\s+\(ErrorCode=<errorNo:gPatInt>,\s+SubErrorCode=<errorNo:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BGP-SEND_NOTIFY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+router\s+sent\s+a\s+NOTIFICATION\s+message\s+to\s+peer\s+<:gPatMesgBodyMin>\.\s+\(ErrorCode=<errorNo:gPatInt>,\s+SubErrorCode=<errorNo:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-BGP-SNMP_PEER_SHUTDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^An\s+SNMP\s+command\s+was\s+received\s+to\s+suspend\s+the\s+peer\s+session\s+for\s+<:gPatMesgBodyMin>\.\s+\(InstanceName:<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CFM-CFM_SYNCFGFILEFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+synchronize\s+the\s+next\s+startup\s+configuration\s+file\s+to\s+slave\s+board\.\s+\(FileName=<fileName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CFM-CLEAR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+deciding\s+whether\s+to\s+clear\s+inactive\s+configuration\s+of\s+slot\s+<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CFM-CFM_CLEARINTERFACECFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+deciding\s+whether\s+to\s+clear\s+configuration\(s\)\s+of\s+the\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CFM-RECOVERCMDFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+recover\s+configuration\s+<command:gPatMesgBodyMin>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CFM-SAVE_FILE_RECORD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+automatically\s+saved\s+the\s+current\s+configuration\s+to\s+the\s+file\.\s+\(FileName=<fileName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CMD-CLKCHGREBOOTCANCELED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Scheduled\s+reboot\s+will\s+be\s+canceled\s+because\s+<user:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CMD-REBOOT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+chose\s+<:gPatMesgBodyMin>\s+when\s+deciding\s+whether\s+to\s+reboot\s+the\s+system\.\s*\(Task=<task:gPatStr>,\s+Ip=<_hostIpAddr:gPatStr>,\s+User=<user:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-CMD-SUPERLOGIN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+changed\s+level\.\s+\(User=<user:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-DLDP-GLOBAL_NB_FULL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^New\s+neighbor\s+cannot\s+be\s+added,\s+because\s+the\s+number\s+of\s+global\s+neighbors\s+reached\s+the\s+upper\s+limit\s+\(4096\)\.\s+\(PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-DLDP-PORT_NB_FULL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^New\s+neighbor\s+cannot\s+be\s+added,\s+because\s+the\s+number\s+of\s+neighbors\s+of\s+the\s+port\s+reached\s+the\s+upper\s+limit\s+\(128\)\.\s+\(PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-DEFD-CPCAR_DROP_LPU'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Rate\s+of\s+packets\s+to\s+cpu\s+exceeded\s+the\s+CPCAR\s+limit\s+on\s+the\s+LPUin\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-DHCP-DHCP_CLIENT_CONFLICT_IPADDR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^DHCP\s+client\s+receive\s+an\s+ARP\s+packet\s+with\s+a\s+conflict\s+IP\s+address\.\s+\(IpAddress=<_hostIpAddr:gPatStr>,\s+MacAddress=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-DHCP-DHCP_BINDTBL_ADDR_CONFLICT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Delete\s+dhcp\s+bind-table\s+because\s+IP\s+address\s+conflict\.\s*\(Bind-table\s+info:\s+InterfaceName=<intfName:gPatStr>,\s+Pvlan=<:gPatMesgBodyMin>,\s+Cvlan=<:gPatMesgBodyMin>,\s+IP\s+Address=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-DHCP-DHCP_RELAY_WRONG_GIADDR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^DHCP\s+relay\s+receive\s+a\s+dhcp\s+packet\s+with\s+wrong\s+giaddr\s+address\.\s+\(InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-DHCP-DHCP_RELAY_WRONG_MAC'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^DHCP\s+relay\s+receive\s+a\s+dhcp\s+packet\s+with\s+wrong\s+MAC\s+address\.\s+\(InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-EFM-INVALID_ORGSPECIFICINFOTLV'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Remote\s+Organization\s+Specific\s+Information\s+TLV\s+was\s+invalid\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-EFM-NONTHRESHOLD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Non-threshold-crossing\s+event\s+occurred\.\s*\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-EFM-REMOTE_STATE_CHANGED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Remote\s+equipment's\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to<:gPatMesgBodyMin>\.\s+\(InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-EFM-THRESHOLD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Threshold-crossing\s+event\s+occurred\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-EFM-TRIGGERIFNET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^EFM\s+trigger\s+interface\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ERPS-PORTADDRINGFAILED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+failed\s+to\s+be\s+added\s+to\s+the\s+ring\.\s*\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ERPS-PORTFWDSTATUS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+forwarding\s+status\s+of\s+the\s+interface\s+is\s+changed\.\s*\(RingID=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ERPS-PORTSIGNALSTATUS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+signal\s+status\s+of\s+the\s+interface\s+is\s+changed\.\s*\(RingID=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ERRDOWN-ERRDOWN_DOWNNOTIFY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+interface\s+to\s+change\s+status\s+to\s+errordown\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ERRDOWN-ERRDOWN_DOWNRECOVER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+interface\s+to\s+recover\s+state\s+from\s+errordown\.\s+\(InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-FTPS-ACL_DENY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+TCP\s+request\s+was\s+denied\s+according\s+to\s+ACL\s+rules\.\s*\(IpAddress=<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-FTPS-LOGINFAILED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+login\.\s+\(UserName="<:gPatMesgBodyMin>",\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-FTPS-LOGIN_OK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+succeeded\s+in\s+login\.\s+\(UserName="<:gPatMesgBodyMin>",\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-FTPS-LOGOUT_OK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+left\.\s+\(UserName="<:gPatMesgBodyMin>",\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-FTPS-REQUEST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+had\s+a\s+request\.\s+\(UserName="<:gPatMesgBodyMin>",\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-FTPS-TRS_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+failed\s+to\s+transfer\s+data\.\s+\(UserName="<:gPatMesgBodyMin>",\s*IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-HA-RESTSLA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Rebooted\s+the\s+slave\s+board\.\s+\(Slot=<hwSlot:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-HA-RSTSLA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Rebooted\s+the\s+slave\s+board,\s+because\s+the\s+messages\s+in\s+the\s+queue\s+were\s+too\s+much\.\s*\(Slot=<hwSlot:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-HA-SWITCH_CHASSIS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+deciding\s+whether\s+to\s+switch\s+the\s+active\s+main\s+board\s+to\s+the\s+standby\s+main\s+board\s+in\s+<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-HTTP-FILETRANSFERFAILURE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+transfer\s+file\s+by\s+HTTP\.\s*\(\s+UserName=<user:gPatStr>,\s+IPAddress=<_hostIpAddr:gPatStr>,\s+FileName=<fileName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-HTTP-FILETRANSFEROK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Succeeded\s+in\s+transferring\s+file\s+by\s+HTTP\.\s*\(\s+UserName=<user:gPatStr>,\s+IPAddress=<_hostIpAddr:gPatStr>,\s+FileName=<fileName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-HTTP-LOGINFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+login\s+failed\.\s+\(UserName=<user:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-HTTP-LOGINOK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+logged\s+in\s+successfully\.\s+\(UserName=<user:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-HTTP-LOGIN_TIMEOUT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^HTTP\s+user\s+timed\s+out\.\s+\(UserName=<user:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-HTTP-VERIFYFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+validate\s+HTTP\s+verification\s+code\.\s+\(UserName=<user:gPatStr>,\s*IPAddress=<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-IFNET-ACOAM_ENABLE_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+notify\s+Application\s+module\s+of\s+the\s+AC\s+OAMCFG\s+event\.\s+\(Application=<appName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-ACOAM_STATE_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+OAM\s+Manager\s+detected\s+interface\s+states\s+change\.\s*\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-APP_NOTIFY_FAULT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+Application\s+module\s+<:gPatMesgBodyMin>\s+of\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-BWRATE_IN_RESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+input\s+flow\s+bandwidth\s+usage\s+was\s+restored\s+to\s+the\s+log\s+threshold\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-BWRATE_IN_RISING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+input\s+flow\s+bandwidth\s+usage\s+exceeded\s+the\s+log\s+threshold\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-BWRATE_OUT_RESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+output\s+flow\s+bandwidth\s+usage\s+was\s+restored\s+to\s+the\s+log\s+threshold\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-BWRATE_OUT_RISING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+output\s+flow\s+bandwidth\s+usage\s+exceeded\s+the\s+log\s+threshold\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-FLOWDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+state\s+of\s+interface\s+turned\s+to\s+DOWN\s+because\s+of\s+FLOW\s+DOWN\.\s*\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-FLOWUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+state\s+of\s+interface\s+turned\s+to\s+UP\s+because\s+of\s+FLOW\s+UP\.\s*\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-IF_DISABLE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-IF_ENABLE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-IF_INFO_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-IF_STATE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-LINK_STATE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+line\s+protocol\s+<:gPatMesgBodyMin>\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-LINKNO_STATE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+line\s+protocol\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-LSP_STATE_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+OAM\s+Manager\s+received\s+the\s+BFD\s+for\s+LSP\s+state\s+changed\s+message\.\s+\(State=<:gPatMesgBodyMin>,\s+Session=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-NOTIFY_BFD_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+notify\s+Application\s+module\s+of\s+the\s+BFD\s+state\s+change\s+event\.\s+\(Application=<appName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-NTF_ACOAM_STATE_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+notify\s+Application\s+module\s+of\s+the\s+AC\s+OAM\s+state\s+change\s+event\.\s+\(Application=<appName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-NTF_STATE_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+OAM\s+Manager\s+interface\s+fault\s+notify\s+state\s+change\.\s*\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-PW_STATE_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+OAM\s+Manager\s+received\s+the\s+BFD\s+for\s+PW\s+state\s+changed\s+message\.\s+\(State=<:gPatMesgBodyMin>,\s+Session=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IFNET-REPEAT_NOTIFY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+Application\s+module\s+repeatedly\s+notified\s+the\s+fault\.\s*\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IGMP-GLB_ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+IGMP\s+discarded\s+the\s+received\s+report\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IGMP-GLB_LIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+all\s+VPN\s+instances,\s+the\s+number\s+of\s+existed\s+IGMP\s+group\s+memberships\s+exceeded\s+the\s+limit\.\s+\(FlCode=<:gPatMesgBodyMin><:gPatMesgBodyMin>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IGMP-IF_ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+IGMP\s+discarded\s+the\s+received\s+report\s+\(<srcIpAddr:gPatIpV4Dot>,\s+<:gPatMesgBodyMin>\)\s+because\s+the\s+number\s+of\s+IGMP\s+group\s+memberships\s+reached\s+the\s+limit\s+on\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IGMP-INST_ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+IGMP\s+discarded\s+the\s+received\s+report\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IGMP-VER1_RECV_INV'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+ignored\s+the\s+received\s+IGMP\s+query\s+of\s+version\s+<:gPatMesgBodyMin>\s+on\s+IGMPv1\s+interface\s+<intfName:gPatStr>\s+\(<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-IGMP-VER2_RECV_INV'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+ignored\s+the\s+received\s+IGMP\s+query\s+of\s+version\s+<:gPatMesgBodyMin>\s+on\s+IGMPv2\s+interface\s+<intfName:gPatStr>\s+\(<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-IGMP-VER3_RECV_INV'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+ignored\s+the\s+received\s+IGMP\s+query\s+of\s+version\s+<:gPatMesgBodyMin>\s+on\s+IGMPv3\s+interface\s+<intfName:gPatStr>\s+\(<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-IPV4-IPV6-MTU_MIN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+path\s+MTU\s+or\s+IPv6\s+MTU\s+of\s+the\s+outgoing\s+interface\s+on\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IPV6FIBAGENT-SENDPLYSLOT6'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^FIB6\s+failed\s+to\s+send\s+a\s+policy\s+to\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IPV6FIBAGENT-SENDQUESLOTFAIL6'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^FIB6\s+failed\s+to\s+send\s+a\s+query\s+to\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-IPV6FIBAGENT-TRIGDELEROUT6'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+routes\s+were\s+deleted\s+due\s+to\s+FIB6\s+policy\s+change\.\s+The\s+type\s+of\s+deletion\s+was\s+<:gPatMesgBodyMin>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TCP6-TCP6_NOACTV_RECVKEY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^TCP\s+segment\s+from\s+source\s+<srcIpAddr:gPatIpV4Dot>\s+to\s+destination\s+<destIpAddr:gPatIpV4Dot>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TCP6-TCP6_NOACTV_SENDKEY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Transmission\s+of\s+TCP\s+segment\s+from\s+source\s+<:gPatMesgBodyMin>\s+to\s+destination\s+<destIpAddr:gPatIpV4Dot>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-AC_RT_SEL_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-AC_RT_V6_SEL_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_L1_SUMRT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_L2_SUMRT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_LKINFO_CSPF_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_MDF_LK_CSPF_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_NTWK_MPLS_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_P2P_ADJ_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Advertising\s+P2P\s+adjacency\s+failed\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_REDSTRBT_RT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_RTTO_LSP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_SRLGTOLINK_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_SUMMRT_URT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_SUMRT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADD_TE_TLV_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ADJ_CHANGE_LEVEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+neighbor\s+of\s+ISIS\s+was\s+changed\.\s*\(IsisProcessId=<procId:gPatStr>,\s+Neighbor=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-AUTH_TLV_OVER_ONECE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-BAD_TLV_LEN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-BIND_SOKT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+bind\s+the\s+socket\s+to\s+the\s+interface<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-CIRC_STATE_SET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-CONFLICT_SYSTEM_ID'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-CREA_AREA_TLV_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-CREATE_CIRCUIT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-CRT_BFD_SESION_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+create\s+the\s+BFD\s+session\s+with\s+peer\s+<:gPatMesgBodyMin>\s+<:gPatMesgBodyMin>\s+on\s+the\s+interface\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-CRT_P2P_ADJ_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DEL_ATTSY_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DEL_BFD_SESSION_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+delete\s+the\s+BFD\s+session\s+with\s+peer\s+<:gPatMesgBodyMin>\s+<:gPatMesgBodyMin>\s+on\s+the\s+interface\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DEL_LKINFO_CSPF_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DEL_NTWK_MPLS_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DEL_SUMMRT_URT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DISABL_RT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+disable\s+ISIS\s+IP\s+route\s+on\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DISABLE_ROUTELEAK_V6'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-DYNC_NAME_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-EN_TE_FAIL_NO_RTID'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ENABLE_TE_LV1_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ENABLE_TE_LV2_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FAIL_CRT_OPT_DYN_NM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FAIL_SEND_DICT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FAIL_TRANS_P2P_CSNP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+transmit\s+P2P\s+CSNP\s+on\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FD_CUR_IFINDEX_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FD_SBNTADDR_BDC_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FLO_LSP_OLO_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-FT_GT_RT_URM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GEN_ATT_LSP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GENLSPDESC_FAILSMB'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GET_IF_FAILSMB'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GET_LINKINFO_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_ACTVE_RT_RM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_CIRC_IFINDX_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_CIRCINDEX_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_INFO_RDM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_ININDEX_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_LGC_PHY_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_LGCIF_V6ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_LGCL_SUBNET_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_LV_RT_URM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_LV_RT_V6_URM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_MPLSTE_RM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_PHYIF_IFNET_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+obtain\s+physical\s+index\s+from\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_RTENTRY_URM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_RTID_RM_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_TELK_INFO_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_V6_PHYIF_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-GT_V6ADDR_PHYIF_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+obtain\s+the\s+IPv6\s+link\s+local\s+address\s+<:gPatMesgBodyMin>\s+from\s+the\s+physical\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-IF_TEMP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+was\s+a\s+temporary\s+interface\.\s+\(IsisProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-IMPORT_LIMIT_EXCEED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-IMPORT_LIMIT_RESTORE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-INIT_DEC_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-INT_BUILDRUN_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+failed\s+to\s+buildrun\s+for\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-INTI_ISIS_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-INVALID_DSTEMOD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IS-IS\s+obtained\s+incorrect\s+information\s+about\s+the\s+DS-TE\s+mode\s+from\s+RM\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-INVID_DR_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+DIS\s+change\s+event\s+is\s+invalid\.\s+\(IsisProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-INVID_TLV_TYPE_REP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+failed\s+to\s+replace\s+the\s+old\s+TLV\s+because\s+TLV\s+type\s+is\s+invalid\.\s+\(IsisProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-JOIN_L1_ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+join\s+all\s+Level-1\s+multicast\s+group\s+for\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-JOIN_L2_ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+join\s+all\s+Level-2\s+multicast\s+group\s+for\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-JOIN_ALLIS_ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+join\s+ALLIS\s+multicast\s+group\s+for\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-LDP_INFORM_RM_ENAB'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IS-IS\s+<procId:gPatStr>\s+informed\s+RM\s+that\s+ldp-sync\s+was\s+enabled\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-LEAVE_L1_ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+leave\s+all\s+Level-1\s+multicast\s+group\s+on\s+the\s+circuit\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-LEAVE_L2_ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+leave\s+all\s+Level-2\s+multicast\s+group\s+on\s+the\s+circuit\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-LEAVE_ALLIS_ADDR_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+leave\s+ALLIS\s+multicast\s+group\s+on\s+the\s+circuit\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-LV_MTCAST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+leaves\s+multicast\s+groups\s+because\s+ISIS\s+received\s+packet\s+on\s+unknown\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-MATCH_CIRC_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-MD_LV_RT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-MD_LV_RT_V6_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-MDF_LKINFO_CSPF_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-MDF_NTWK_MPLS_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-MTU_EXCEED_MAXPDU'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+MTU\s+size\s+<:gPatMesgBodyMin>\s+exceeded\s+the\s+maximum\s+PDU\s+size\s+<:gPatMesgBodyMin>,\s+and\s+set\s+the\s+MTU\s+to\s+the\s+maximum\s+PDU\s+size\.\s+\(IsisProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-P2P_CIRC_TX_LSP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_BFDDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_CIRC_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+because\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_DIS_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IS-IS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_LOW_MEMORY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_NO_MEMORY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_REPTADJ'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_REPTP2PADJ'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DOWN_RPRDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_ADJ_STATDWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_AREAMISMACH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_CIRC_SILENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+because\s+silent\s+is\s+set\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_HLDTMR_EXPR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_ID_CONFLICT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_LEVEL_CHANG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_PDUMISMATCH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_SYS_DISABLE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_DWN_SYSTYP_UNKN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+was\s+Down\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PEER_UP_ADJ_CREATE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+process\s+id\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-PROCESS_TMR_EVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^A\s+timer\s+expired\s+when\s+ISIS\s+process\s+was\s+invalid\.\s*\(TimerEvent=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-RCV_ERRSELFLSP_SMB'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-REC_RM_MEM_RESTORE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-REC_RM_MEM_SHORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-REDIST_THRESHOLD_REACH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-REDIST_THRESHOLD_REACH_CLEAR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-RM_CIRC_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-RM_CIRC_CHANGE_V6'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-RM_LOGICRC_CHGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-RM_LOGICRC_CHGE_V6'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-SB_CIR_NOT_ENABLE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+static\s+BFD\s+was\s+not\s+enabled\s+on\s+interface<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-SELF_LSP_EXPIRED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-ST_LK_CNTRL_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-START_DISABLE_ISIS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-START_ENABLE_ISIS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_EXPIR_GR_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,\s+level-<:gPatMesgBodyMin>\s+T1\s+timer\s+expired\s+on\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_LV1_CACEL_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_LV1_EXPIR_GR_C'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,\s+level-1\s+T1\s+timer\s+expired\s+on<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_LV1_STOP_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_LV2_CACEL_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_LV2_EXPIR_GR_C'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,\s+level-2\s+T1\s+timer\s+expired\s+on<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T1TMR_LV2_STOP_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_LV1_CANCL_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_LV1_EXPIR_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_LV1_STOP_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_LV2_CANCL_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_LV2_EXPIR_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_LV2_STOP_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_STAR_L1_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^T2\s+timer\s+started\s+on\s+level-1\s+during\s+ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T2TMR_STAR_L2_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^T2\s+timer\s+started\s+on\s+level-2\s+during\s+ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T3TMR_CANCL_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T3TMR_EXPIR_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T3TMR_REINT_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+ISIS\s+<procId:gPatStr>,\s+T3\s+timer\s+re-initialized\s+to\s+<:gPatMesgBodyMin>\s+seconds\s+on\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T3TMR_STAR_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^T3\s+timer\s+started\s+during\s+ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-T3TMR_STOP_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-TMER_STIL_USED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+timer\s+is\s+in\s+use\.\s+\(TimerType=<:gPatMesgBodyMin>,\s*UsageCount=<:gPatMesgBodyMin>,\s+IsisProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-TORM_LEV_RESTA_SMOH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-TORM_LEV_RESTAR_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-TORM_LEV_RESTAR_SPF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-TORM_RNTR_RESTAR_CMD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-UNBIND_SOKT_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s+failed\s+to\s+unbind\s+socket\s+for\s+the\s+circuit<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-ISIS-WRONG_VERSION'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^ISIS\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IF-PORT_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IF-PORT_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IF-ROUTER_TO_SWITCH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Start\s+to\s+switch\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IF-SLA_RCV_INDEX_BY_BAT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+slave\s+control\s+board\s+obtains\s+the\s+L2\s+port\s+index\s+from\s+the\s+main\s+control\s+board\s+through\s+batch\s+backup\.\s+The\s+port\s+name\s+is\s+<devPort:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IF-SLA_RCV_PORTINDEX'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+slave\s+control\s+board\s+obtains\s+the\s+L2\s+port\s+index\s+from\s+the\s+main\s+control\s+board\s+through\s+realtime\s+backup\.\s+The\s+port\s+name\s+is\s+<devPort:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IF-SWITCH_TO_ROUTER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Start\s+to\s+switch\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2IFPPI-MAC_CFG_ERROR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+MAC\s+address\s+<hostMACAddr:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-BGPVC_DWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+Kompella\s+VC\s+turned\s+DOWN\.\s+\(VcVpnName=<:gPatMesgBodyMin>,\s+CeId=<:gPatMesgBodyMin>,\s+RemoteCeId=<:gPatMesgBodyMin>,\s*InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-BGPVC_P2W'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+Kompella\s+VC\s+turned\s+working\s+from\s+protecting\.\s+\(VcVpnName=<:gPatMesgBodyMin>,\s+CeId=<:gPatMesgBodyMin>,\s+RemoteCeId=<:gPatMesgBodyMin>,\s*InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-BGPVC_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+Kompella\s+VC\s+turned\s+UP\.\s+\(VcVpnName=<:gPatMesgBodyMin>,\s*CeId=<:gPatMesgBodyMin>,\s+RemoteCeId=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-BGPVC_W2P'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+Kompella\s+VC\s+turned\s+protecting\s+from\s+working\.\s+\(VcVpnName=<:gPatMesgBodyMin>,\s+CeId=<:gPatMesgBodyMin>,\s+RemoteCeId=<:gPatMesgBodyMin>,\s*InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-LDP_MSG_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+an\s+error\s+or\s+unknown\s+signal\s+message\.\s*\(MessageType=<:gPatMesgBodyMin>,\s+PeerIpAddress=<_hostIpAddr:gPatStr>,\s+ErrorReason=<errReason:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-L2V-PWE3VC_BACKUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+PWE3\s+VC\s+turned\s+BACKUP\.\s+\(VcId=<:gPatMesgBodyMin>,\s*VcType=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-PWE3VC_DWN_ME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+PWE3\s+VC\s+turned\s+DOWN\.\s+\(VcId=<:gPatMesgBodyMin>,\s*VcType=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-PWE3VC_UP_ME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+PWE3\s+VC\s+turned\s+UP\.\s+\(VcId=<:gPatMesgBodyMin>,\s*VcType=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-PWLOOPDETECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^A\s+PW\s+loop\s+is\s+detected\.\s+\(VcId=<:gPatMesgBodyMin>,\s+VcType=<:gPatMesgBodyMin>,\s*LoopIpAddress=<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-L2V-SVC_DWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+SVC\s+turned\s+DOWN\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-SVC_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+SVC\s+turned\s+UP\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-L2V-VPLSVC_BACKUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+VPLS\s+VC\s+turned\s+BACKUP\.\s*\(VsiName=<:gPatMesgBodyMin>,\s+RemoteIp=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-L2V-VPLSVC_DWN_ME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+VPLS\s+VC\s+turned\s+DOWN\.\s*\(VsiName=<:gPatMesgBodyMin>,\s+RemoteIp=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-L2V-VPLSVC_UP_ME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+VPLS\s+VC\s+turned\s+UP\.\s+\(VsiName=<:gPatMesgBodyMin>,\s*RemoteIp=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-LACP-LACP_SND_PDU_IO_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+main\s+board\s+failed\s+to\s+send\s+LACP\s+packet\s+to\s+the\s+port\.\s+\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LACP-PORT_SND_PDU_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+port\s+failed\s+to\s+send\s+LACP\s+packet\.\s*\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LACP-TMR_NTT_TX'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+TX\s+state\s+machine\s+is\s+run\s+because\s+PDU\s+NTT\s+of\s+the\s+trunk\s+is\s+zero\s+in\s+timer\.\s+\(TrunkName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-FAILALLOCTOKEN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+allocate\s+a\s+token\s+to\s+FEC\s+<destIpAddr:gPatIpV4Dot>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-FAILEXITMUL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+exit\s+the\s+UDP\s+multicast\s+group\.\s+\(ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-FAILJOINMUL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+join\s+the\s+UDP\s+multicast\s+group\.\s+\(ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-FAILSENDMSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+send\s+TCP\s+message\.\s+\(PeerIP=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-LDP-IFJIONFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-IFJIONSUCC'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-INSTAIDINVALID'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-JIONRETRYFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-OPENRETRYTMR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-SMTHREJIONMUL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LDP-SRVREFUSE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+server\s+refused\s+the\s+request\s+of\s+the\s+instance\s+<:gPatMesgBodyMin>\.\s*\(PeerIP=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-LINE-UNLOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+unlocked\s+the\s+user-interface\s+<intfName:gPatStr>\s+successfully\.\s*\(UserName=<user:gPatStr>,\s+IPAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-LINE-UNLOCK_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+user\s+failed\s+to\s+unlock\s+the\s+user-interface\s+<intfName:gPatStr>\.\s*\(UserName=<user:gPatStr>,\s+IPAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-LLDP-BAD_PACKET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<:gPatMesgBodyMin>\s+invalid\s+packets\s+were\s+received\s+after\s+latest\s+notification\.\s+The\s+last\s+invalid\s+packet\s+came\s+from\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LLDP-CREATEPORTFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LLDP-DESTINATIONSLOTNOTUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Destination\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LLDP-SENDIPCFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+send\s+IPC\s+message\.\s*\(Destination\s+slot=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LLDP-SENDRPCFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+send\s+RPC\s+message\.\s*\(Destination\s+slot=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LOAD-CLIENTLEFT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+client\s+that\s+is\s+loading\s+system-software\s+has\s+left\s+the\s+stack,\s+and\s+the\s+server\s+slot\s+is\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LOAD-SLOTJOINED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LOAD-SLOTLEFT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-DSTEMODESWITCH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^DS-TE\s+mode\s+switched\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-FAIL_CREATE_STALE_IF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+create\s+the\s+stale\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-FAIL_DELETE_STALE_IF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+delete\s+the\s+stale\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-GRAGINGFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^An\s+error\s+occurred\s+when\s+the\s+aging\s+of\s+an\s+RSVP\s+LSP\s+was\s+in\s+process\.\s*\(ErrorCode=<errorNo:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-GTSMMSGSENDFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+send\s+GTSM\s+policy\.\s+\(Protocol=<:gPatMesgBodyMin>,\s*Flag=<:gPatMesgBodyMin>,\s+Address=<:gPatMesgBodyMin>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-HASMOOTHFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^An\s+error\s+occurred\s+when\s+LSPM\s+was\s+processing\s+smoothing\.\s*\(ErrorCode=<errorNo:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-SLOTPLUGINOUTEVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+slot\s+event\s+<:gPatMesgBodyMin>\s+from\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-LSPM-TRIGGERRSVPFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+trigger\s+RSVP\s+during\s+GR\.\s+\(ErrorCode=<errorNo:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MCAST-ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+set\s+forwarding\s+table\(group\s+ip=\s+<:gPatMesgBodyMin>,\s*group\s+mac=<:gPatMesgBodyMin>,\s*source\s+ip=<:gPatMesgBodyMin>\s+in-VlanID=<hostVLAN:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MCAST-FIB'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^there\s+is\s+no\s+flow\s+in\s+the\s+fib\s+entry\(group\s+ip=\s+<:gPatMesgBodyMin>,\s*source\s+ip=<:gPatMesgBodyMin>\s+inVlanID=<hostVLAN:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MCAST-SUPPRESS_LEAVE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Suppress\s+leave\s+packet\.\s+\(VlanID=<hostVLAN:gPatInt>,\s*GroupIp=<:gPatStr>,\s+ReceiveInterface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MCAST-SUPPRESS_REPORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Suppress\s+report\s+packet\.\s+\(VlanID=<hostVLAN:gPatInt>,\s+Group\s+ip=<:gPatStr>,\s+ReceiveInterface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MFIB-DOWNNUM_EXCEED_RESTORE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+downstream\s+interfaces\s+in\s+theentry\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MFIB-INVALID_OIF_NUM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+entry\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MFIB-REACH_TO_MAX_LIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Can\s+not\s+add\s+entry\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MLD-ERR_VER_PKT1'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+ignored\s+the\s+Query\s+received\s+with\s+the\s+version\s+of\s+MLDv<:gPatMesgBodyMin>\s+on\s+the\s+MLDv1\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MLD-ERR_VER_PKT2'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+ignored\s+the\s+Query\s+received\s+with\s+the\s+version\s+of\s+MLDv<:gPatMesgBodyMin>\s+on\s+the\s+MLDv2\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MLD-GLB_ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+MLD\s+discarded\s+the\s+received\s+report\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MLD-IF_ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+MLD\s+discarded\s+the\s+received\s+report\s+\(<srcIpAddr:gPatIpV4Dot>,\s+<:gPatMesgBodyMin>\)\s+because\s+the\s+number\s+of\s+MLD\s+group\s+memberships\s+reached\s+the\s+limit\s+on\s+the\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MLD-INST_ENTRY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+MLD\s+discarded\s+the\s+received\s+report\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MLD-SET_MLD_INTPLC_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+failed\s+to\s+set\s+the\s+MLD\s+application\s+policy\s+for\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MPLS-VSI_ADD_DENYACL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Add\s+VSI\s+deny\s+ACL\s+failed\s+\(SlotID=<hwSlot:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MPLS-VSI_ADD_VFP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Add\s+VFP\s+Entry\s+failed\s+\(SlotID=<hwSlot:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MRM-SEARCH_MIGP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+finding\s+the\s+specified\s+route\s+<srcIpAddr:gPatIpV4Dot>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MRM-VLINKID_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+virtual\s+link\s+index\s+changed\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSDP-SA_LIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+\(S,\s*G\)\s+entry\s+whose\s+RP\s+was<:gPatMesgBodyMin>\s+was\s+\(<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-BPDU_PROTECTION'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^This\s+edged-port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-EDGE_PORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Edged-port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-LOOPBACK_DETECTED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-LOOP_GUARD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^MSTP\s+process\s+<procId:gPatStr>\s+Instance<:gPatMesgBodyMin>'s\s+LOOPProtection\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-PACKET_ERR_COMPLIAN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+port\s+compliance\s+protocol\s+type\s+of\s+the\s+packet\s+received\s+by\s+MSTP\s+from\s+the\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-PORT_INIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^MSTP\s+port\s+initialization\s+finished,\s+MSTP\s+process\s+<procId:gPatStr>\s+instance\s+<:gPatMesgBodyMin>,\s+port\s+name\s+is\s+<devPort:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-RECEIVE_MSTITC'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^MSTP\s+received\s+BPDU\s+with\s+TC,\s+MSTP\s+process\s+<procId:gPatStr>\s+instance\s+<:gPatMesgBodyMin>,\s+port\s+name\s+is\s+<devPort:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-ROOT_LOST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^This\s+bridge\s+is\s+no\s+longer\s+the\s+root\s+bridge\s+of\s+the\s+MSTP\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-SET_PORT_DISCARDING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+MSTP\s+process\s+<procId:gPatStr>\s+instance\s+<:gPatMesgBodyMin>,\s+MSTP\s+set\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-SET_PORT_FORWARDING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+MSTP\s+process\s+<procId:gPatStr>\s+instance\s+<:gPatMesgBodyMin>,\s+MSTP\s+set\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-SET_PORT_LEARNING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+process\s+<procId:gPatStr>\s+instance\s+<:gPatMesgBodyMin>,\s+MSTP\s+set\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-MSTP-SET_PORT_DISABLE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Set\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-NAP-NAP_LINK_TIMEOUT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^NAP\s+link\s+timed\s+out\.\s+\(PeerDevName=<:gPatMesgBodyMin>,\s+PeerPortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-NAP-NAP_LOGIN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^NAP\s+user\s+login\s+from\s+<_hostIpAddr:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-NATPT-ADD_ENABLELIST_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Unable\s+to\s+add\s+the\s+interface\s+to\s+NATPT-enabled-list\s+on\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-NATPT-CONTR_ADDR_EXHAUST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Address-group\s+<:gPatMesgBodyMin>\s+exhausted\s+when\s+applying\s+free\s+address\s+from\s+the\s+address-group\s+in\s+centralized\s+system\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-NATPT-DEL_ENABLELIST_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Unable\s+to\s+delete\s+the\s+interface\s+from\s+NATPT-enabledlist\s+on\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-NSADP-NS_ID_RPCFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+send\s+message\s+to\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-NTP-PEER_SELE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+peer\s+selected\s+by\s+the\s+system\s+is\s+<srcIpAddr:gPatIpV4Dot>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-BOARD_OUT_TUNN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-LSP_EN_AVA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+enter\s+available\s+state\.\s+\(Ingress\s+LsrId=<:gPatMesgBodyMin>,\s+TunnelSessionId=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-LSP_EN_DEF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+enter\s+defect\s+state!\s+\(Ingress\s+LsrId=<:gPatMesgBodyMin>,\s+TunnelSessionId=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-LSP_EN_UNAVA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+enter\s+unavailable\s+state!\s+\(Ingress\s+LsrId=<:gPatMesgBodyMin>,\s+TunnelSessionId=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-LSP_QUIT_DEF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+quit\s+defect\s+state\.\s+\(Ingress\s+LsrId=<:gPatMesgBodyMin>,\s+Tunnel\s+SessionId=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-LSP_START_DET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+start\s+detect\.\s+\(Ingress\s+LsrId=<:gPatMesgBodyMin>,\s+Tunnel\s+SessionId=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-LSP_STOP_DET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+stop\s+detect\.\s+\(Ingress\s+LsrId=<:gPatMesgBodyMin>,\s+Tunnel\s+SessionId=<sessionId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-TUN_EN_AVA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-TUN_EN_DEF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-TUN_EN_UNAVA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-TUN_QUIT_DEF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-TUN_START_DET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OAM-TUN_STOP_DET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[<vpnTunnelName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-ADD_NBR_PRLIST_VLINK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-ALL_NBR_FULL_EXIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-AUTO_CHG_RTRID'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+automatically\s+changes\s+the\s+router\s+ID\s+when\s+detecting\s+router\s+ID\s+conflict\s+in\s+the\s+area\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-BAD_IP_PACKET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+the\s+first\s+bad\s+IP\s+packet\s+within\s+an\s+interval\s+of\s+15\s+minutes\.\s*\(ErrorType=<:gPatMesgBodyMin>,\s+ErrorInformation=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>,\s*SourceAddress=<srcIpAddr:gPatIpV4Dot>,\s+DestinationAddress=<destIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-BAD_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+the\s+first\s+bad\s+LSA\s+within\s+an\s+interval\s+of\s+15\s+minutes\.\s+\(ErrorType=<:gPatMesgBodyMin>,\s+ErrorInformation=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>,\s*InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-BAD_OSPF_PACKET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+the\s+first\s+bad\s+OSPF\s+packet\s+within\s+an\s+interval\s+of\s+15\s+minutes\.\s+\(ErrorType=<:gPatMesgBodyMin>,\s+ErrorInformation=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>,\s*InterfaceName=<intfName:gPatStr>,\s+SourceAddress=<srcIpAddr:gPatIpV4Dot>,\s+DestinationAddress=<destIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-CHG_LSA_HELPER_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-CONFLICT_IP_ADDRESS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+interface\s+IP\s+address\s+conflict\s+is\s+detected\s+on\s+intra-area\.\s+\(ProcessId=<procId:gPatStr>,\s+RouterId=<:gPatStr>,\s+AreaId=<:gPatStr>,\s*InterfaceName=<intfName:gPatStr>,\s+IpAddr=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-CONFLICT_ROUTERID_INTER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+Router\s+id\s+conflict\s+maybe\s+occur\s+on\s+interarea\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-CONFLICT_ROUTERID_INTF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+Router\s+id\s+conflict\s+is\s+detected\s+on\s+interface\.\s*\(ProcessId=<procId:gPatStr>,\s+RouterId=<:gPatStr>,\s+AreaId=<:gPatStr>,\s*InterfaceName=<intfName:gPatStr>,\s+IpAddr=<_hostIpAddr:gPatStr>,\s+PacketSrcIp=<srcIpAddr:gPatIpV4Dot>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-CONFLICT_ROUTERID_INTRA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+Router\s+id\s+conflict\s+is\s+detected\s+on\s+intra-area\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-DEL_NBR_PRLIST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+deletes\s+neighbor\s+from\s+pre-restart\s+neighbor\s+list\.\s+\(RouterId=<:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-DEL_NBR_PRLIST_VLINK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-DR_ELECT_FAILED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-END_GR_NODE_IN_LIST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-ENTER_HELPER_MODE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+enters\s+helper\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-FIND_NBR_SHAMLINK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+finds\s+pre-restart\s+neighbor\s+<:gPatMesgBodyMin>,\s+on\s+sham-link\s+source=<:gPatMesgBodyMin>\s+destination=<destIpAddr:gPatIpV4Dot>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-FINISH_ADD_ASE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-FINISH_ADD_NSSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-FLSH_STL_AS_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Finish\s+flushing\s+stale\s+As-external-LSAs\s+and\s+NSSA\s+LSAs\.\s*\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-FLUSH_STAL_AREA_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Flush\s+stale\s+area\s+LSAs\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_ADD_NBR_PRLIST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_END_SUCCESS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_EXIT_GR_UNSU'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_EXIT_HLP_SU'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+neighbor\s+<:gPatMesgBodyMin>\s+exits\s+helper\s+successfully\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_HLP_TIMER_FIRED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+helper\s+waits\s+for\s+timer\s+to\s+be\s+fired,\s+because\s+grace\s+period\s+expired\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_IF_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+exited\s+GR\s+mode\s+as\s+interface\s+status\s+changed\.\s*\(InterfaceName=<intfName:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_NOTIFYRM_EXIT_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_RECV_1WAY_HELLO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+exits\s+GR\s+mode\s+as\s+1-way\s+hello\s+is\s+received\s+from\s+neighbor\s+<:gPatMesgBodyMin>,\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-GR_START_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-HLP_EXIT_RECV_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+exits\s+the\s+helper\s+mode\s+because\s+floodingreceived\s+changed\s+LSA\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-IF_CHG_E'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s+received\s+event\s+<:gPatMesgBodyMin>,\s+interface\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-IF_TYPE_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Physical\s+interface\s+type\s+changed\.\s+\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-INTF_EXIT_HLP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+exiting\s+interface\s+level\s+helper\s+mode\s+unsuccessfully\s+for\s+Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-INTF_NSR_EVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+of\s+the\s+<:gPatMesgBodyMin>\s+received\s+event\s+<:gPatMesgBodyMin>,\s+and\s+NSR\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s+\(IfName=<intfName:gPatStr>,\s+IpAddr=<_hostIpAddr:gPatStr>,\s+ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-INTF_NSR_OVERTIME_LIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+interface\s+go\s+on\s+process,\s+as\s+slave's\s+ack\s+didn'tcome\s+for\s+<:gPatMesgBodyMin>\s+seconds\.\s+\(IfName=<intfName:gPatStr>,\s+IpAddr=<_hostIpAddr:gPatStr>,\s+ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-ISSU_SMB_CMD_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SMB\s+failed\s+to\s+run\s+Command\s+\(<command:gPatMesgBodyMin>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-JOIN_MULGRP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+join\s+the\s+multicast\s+group\.\s+\(MulticastGroupAddress=<:gPatStr>,\s+ReturnValue=<:gPatMesgBodyMin>,\s+InterfaceNetworkIndex=<:gPatMesgBodyMin>,\s*PhysicalIndex=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-LDP_INIT_EVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-LDP_SYNC_CREA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-LDP_SYNC_EVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-LDP_SYNC_FIRE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-LEAVE_MULGRP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+leave\s+the\s+multicast\s+group\.\s*\(MulticastGroupAddress=<:gPatStr>,\s+ReturnValue=<:gPatMesgBodyMin>,\s*InterfaceNetworkIndex=<:gPatMesgBodyMin>,\s+PhysicalIndex=<:gPatMesgBodyMin>,\s+InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-LSA_CHANGE_FREQUENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSAs\s+change\s+frequently\s+now\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-MISMATCH_HELPER_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+can\s+not\s+enter\s+helper\s+mode,\s+neighbor-ID\s+mismatch\s+with\s+restarting\s+neighbor\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NBR_CHANGE_E'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Neighbor\s+changes\s+event:\s+neighbor\s+status\s+changed\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NBR_CHG_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Neighbor\s+event:\s+neighbor\s+state\s+changed\s+to\s+Down\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NBR_DOWN_REASON'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Neighbor\s+state\s+leaves\s+full\s+or\s+changed\s+to\s+Down\.\s*\(ProcessId=<procId:gPatStr>,\s+NeighborRouterId=<:gPatStr>,\s+NeighborAreaId=<:gPatMesgBodyMin>,\s*NeighborInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NBR_STATE_HELPER_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NOTIFYRM_ENTER_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_AMB_ENWARM_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+was\s+notified\s+that\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_AMB_EXWARM_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+was\s+notified\s+that\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_AREARECV_DATA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+AMB\s+notified\s+SMB\s+that\s+area\s+<:gPatMesgBodyMin>'s\s+data\s+is\s+acceptable\s+now\.\s+\(InstanceId=<:gPatMesgBodyMin>,\s+ProcId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_AREARECV_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SMB\s+received\s+the\s+notification\s+from\s+the\s+AMB\.\s+Now\s+area\s+<:gPatMesgBodyMin>'s\s+data\s+is\s+acceptable\.\s+\(InstanceId=<:gPatMesgBodyMin>,\s+ProcId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_AREARESET_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+AMB\s+received\s+the\s+notification\s+from\s+the\s+SMB\.\s+Now\s+area\s+<:gPatMesgBodyMin>\s+can\s+be\s+activated\s+or\s+freed\.\s+\(InstanceId=<:gPatMesgBodyMin>,\s+ProcId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_PROCRECV_DATA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+AMB\s+notified\s+the\s+SMB\s+that\s+process\s+<procId:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_PROCRECV_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SMB\s+received\s+the\s+notification\s+from\s+the\s+AMB\.\s+Now\s+process\s+<procId:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSR_PROCRESET_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+AMB\s+received\s+the\s+notification\s+from\s+the\s+SMB\.\s+Now\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-NSSA_STATE_ELECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+NSSA\s+translator\s+is\s+set\s+to\s+<:gPatMesgBodyMin>\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-ONE_IF_EXIT_WAITING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-ONEIF_ENTER_WAITING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-PLCY_FAIL_HELPER_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+cannot\s+enter\s+the\s+helper\s+mode\s+because\s+configuring\s+policies\s+for\s+restarting\s+peer\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-RECV_DIFF_GRACE_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+receives\s+a\s+grace\s+LSA\s+different\s+from\s+the\s+one\s+in\s+LSDB\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-RECV_FIRST_GLSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+attempted\s+to\s+enter\s+helper\s+mode\s+and\s+received\s+first\s+grace\s+LSA\s+from\s+neighbor\s+<:gPatMesgBodyMin>,\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-RECV_TWO_GRACELSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+exited\s+GR\s+mode\s+as\s+grace\s+LSA\s+received\s+from\s+neighbor\s+<:gPatMesgBodyMin>,\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-RST_NBR_IN_PTIAL_GR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+entered\s+the\s+partial\s+GR\s+mode\s+and\s+exited\s+GR\s+for\s+neighbor\s+<:gPatMesgBodyMin>\s+on\s+<:gPatMesgBodyMin>\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-RTRLSA_BACKLINK_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+exits\s+GR\s+mode\s+as\s+Back\s+link\s+checking\s+failed\s+on\s+neighbor\s+<:gPatMesgBodyMin>,\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SHAMLINK_IF_CHG_E'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Shamlink\s+interface\s+<intfName:gPatStr>\s+received\s+event\s+<:gPatMesgBodyMin>,\s+interface\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SHAMLINK_NBR_CHG_E'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Shamlink\s+peer\s+event:\s+neighbor\s+status\s+changed\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SHAMLINK_NBR_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Shamlink\s+neighbor\s+event:\s+neighbor\s+state\s+changed\s+toDown\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SINTF_NSR_EVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Shamlink\s+interface\s+of\s+the\s+<:gPatMesgBodyMin>\s+received\s+event<:gPatMesgBodyMin>,\s+and\s+NSR\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s+\(DestIp=<destIpAddr:gPatIpV4Dot>,\s*SourceIp=<srcIpAddr:gPatIpV4Dot>,\s+ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SINTF_NSR_OVERTIME_LIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+shamlink\s+interface\s+go\s+on\s+process,\s+as\s+slave's\s+ack\s+didn't\s+come\s+for\s+<:gPatMesgBodyMin>\s+seconds\.\s+\(DestIp=<destIpAddr:gPatIpV4Dot>,\s+SourceIp=<srcIpAddr:gPatIpV4Dot>,\s+ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SMB_NSR_AREA_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SMB\s+notified\s+the\s+AMB\s+to\s+activate\s+or\s+free\s+area<:gPatMesgBodyMin>\.\s+\(InstanceId=<:gPatMesgBodyMin>,\s+ProcId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-SMB_NSR_PROC_INFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SMB\s+notified\s+the\s+AMB\s+to\s+activate\s+or\s+free\s+process<procId:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-STUB_RT_EX_UD_STUB'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-STUB_RT_ONBT_TM_CRT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-STUB_RT_TM_FIRE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_AGE_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+LSA\s+aged\s+out\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_HELPER_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+the\s+change\s+in\s+restart\s+helper\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_INTF_AUTH_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+authentication\s+has\s+failed\.\s*\(ProcessId=<procId:gPatStr>,\s+RouterId=<:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_INTF_BAD_RX'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+received\s+bad\s+packet\.\s+\(ProcessId=<procId:gPatStr>,\s*RouterId=<:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_INTF_CFG_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+configuration\s+error\s+has\s+occurred\.\s+\(ProcessId=<procId:gPatStr>,\s+RouterId=<:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_INTF_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+state\s+has\s+changed\.\s+\(ProcessId=<procId:gPatStr>,\s*RouterId=<:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_INTF_RETX'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+has\s+retransmitted\.\s+\(ProcessId=<procId:gPatStr>,\s*RouterId=<:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_LSDB_APP_OFLOW'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+LSDB\s+approaching\s+overflow\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_LSDB_OVERFLOW'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+LSDB\s+overflow\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_NBR_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Neighbor\s+state\s+has\s+changed\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_NSSA_TRANS_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+the\s+change\s+in\s+NSSA\s+translator\s+role\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_ORG_LSA'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Router\s+originating\s+LSA\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_RESTART_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+the\s+change\s+in\s+restart\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIF_AUTH_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+interface\s+authentication\s+has\s+failed\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIF_CFG_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+interface\s+configuration\s+error\s+has\s+occurred\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIF_RX_BAD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+interface\s+received\s+bad\s+packet\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIR_HELPER_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Notify\s+the\s+change\s+in\s+virtual\s+neighbor\s+restart\s+helper\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIR_INTF_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+interface\s+state\s+has\s+changed\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIR_INTF_RETX'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+interface\s+has\s+retransmitted\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-TRAP_VIR_NBR_CHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+neighbor\s+state\s+has\s+changed\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-UPLAN_MATCH_HLPFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPF\s+<procId:gPatStr>\s+can\s+not\s+enter\s+helper,\s+unplanned\s+configuration\s+mismatch\s+with\s+restart\s+peer\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-VINTF_NSR_EVENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+link\s+interface\s+of\s+the\s+<:gPatMesgBodyMin>\s+received\s+event<:gPatMesgBodyMin>,\s+and\s+NSR\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s+\(NbrID=<:gPatMesgBodyMin>,\s*IpAddr=<_hostIpAddr:gPatStr>,\s+ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-VINTF_NSR_OVERTIME_LIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+virtual\s+link\s+interface\s+go\s+on\s+process,\s+as\s+slave's\s+ack\s+didn't\s+come\s+for\s+<:gPatMesgBodyMin>\s+seconds\.\s+\(NbrID=<:gPatMesgBodyMin>,\s+IpAddr=<_hostIpAddr:gPatStr>,\s+ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-OSPF-VLINK_IF_CHG_E'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+link\s+interface\s+<intfName:gPatStr>\s+received\s+event\s+<:gPatMesgBodyMin>,\s+interface\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-VLINK_NBR_CHG_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+link\s+peer\s+event:\s+neighbor\s+state\s+changed\s+toDown\.\s+\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPF-VLINK_NBR_CHG_E'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+link\s+peer\s+event:\s+neighbor\s+status\s+changed\.\s*\(ProcessId=<procId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-BFD_RM_EVNT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPFv3\s+BFD\s+Received\s+event\s+notification\s+<:gPatMesgBodyMin>\s+from\s+RM\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-BFD_SESSION_NTFY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OSPFv3\s+BFD\s+sending\s+session\s+<:gPatMesgBodyMin>\s+notification\s+to\s+RM\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-GRINTFDWNERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-GRNORMALRSTERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Exited\s+from\s+graceful\s+restart\s+because\s+normal\s+reset\s+is\s+executed\s+on\s+OSPFv3\s+process\s+<procId:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-GRPROCDELERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Exited\s+from\s+graceful\s+restart\s+because\s+OSPFv3\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-HELLO_DELAY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Sending\s+hello\s+packet\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-IFSMCHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to<:gPatMesgBodyMin>\.\s+\(Event=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-OSPFV3-NFSMCHG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Neighbor\s+state\s+changed\s+from\s+<:gPatMesgBodyMin>\s+to\s+<:gPatMesgBodyMin>\.\s*\(Event=<:gPatMesgBodyMin>,\s+RouterId=<:gPatMesgBodyMin>,\s+Interface=<intfName:gPatStr>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PAF-READLCSFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+read\s+License\s+file\s+when\s+initializing\s+LCS\.\s+\(ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PAF-READPAFFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+read\s+PAF\s+file\s+when\s+initializing\s+PAF\.\s+\(ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PATCH-READ_FILE_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+slot\s+<hwSlot:gPatStr>,\s+read\s+patch\s+file\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-FNDNBR_DNDB_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+finding\s+neighbor\s+<:gPatMesgBodyMin>\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-GRP_ADDR_IS_LOCAL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+<:gPatStr>,\s+because\s+the\s+group\s+address\s+<:gPatMesgBodyMin>/<:gPatMesgBodyMin>\s+is\s+a\s+link/node\s+local\s+address,\s+the\s+<:gPatMesgBodyMin>\s+message\s+received\s+from\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-GRP_ADDR_NOT_MCAST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+<:gPatStr>,\s+because\s+the\s+group\s+address\s+<:gPatMesgBodyMin>/<:gPatMesgBodyMin>\s+is\s+not\s+a\s+multicast\s+address,\s+the\s+<:gPatMesgBodyMin>\s+message\s+received\s+from\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-GRP_MASK_UNSUPPORTED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+<:gPatStr>,\s+because\s+the\s+length\s+of\s+the\s+mask\s+of\s+the\s+group\s+address\s+<:gPatMesgBodyMin>/<:gPatMesgBodyMin>\s+is\s+unsupported,\s+the\s+<:gPatMesgBodyMin>\s+message\s+received\s+from\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-MTU_IF_SHT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+the\s+MTU\s+of\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-NBR_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+a\s+neighbor\s+was\s+deleted\s+from\s+the\s+interface\.\s+The\s+reason\s+is\s+<:gPatMesgBodyMin>\s+\(NeighborIpAddress=<:gPatStr>,\s+Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-NBR_DOWN_ALL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+all\s+neighbors\s+were\s+deleted\s+from\s+the\s+interface\s+because\s+the\s+interface\s+was\s+down\s+or\s+PIM\s+was\s+disabled\s+on\s+the\s+interface\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-NBR_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+a\s+new\s+neighbor\s+was\s+created\s+on\s+the\s+interface\.\s+\(NeighborIpAddress=<:gPatStr>,\s+Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-PIMPKT_CHKSUM_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+the\s+PIM\s+packet\s+received\s+from\s+<srcIpAddr:gPatIpV4Dot>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-PUTNBR_DNDB_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+\"<:gPatStr>\",\s+adding\s+neighbor\s+<:gPatMesgBodyMin>\s+on\s+interface\s+<intfName:gPatStr>\s+\(<:gPatMesgBodyMin>\)\s+to\s+entry\s+\(<srcIpAddr:gPatIpV4Dot>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-PIM-SRC_MASK_UNSUPPORTED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^In\s+VPN\s+instance\s+<:gPatStr>,\s+the\s+length\s+of\s+the\s+mask\s+of\s+the\s+source\s+address\s+<srcIpAddr:gPatIpV4Dot>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-LEGACYPD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-PDOVERCURRENT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-PDCONNECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-PDDISCONNECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-PDPOWEROFF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-PDPOWERON'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-POWERFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-POE-POWERSUCCESS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^PD\s+on\s+the\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-WEB-PORTALSERVER_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+portal\s+server\s+is\s+down\.\s*\(IP:<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-WEB-PORTALSERVER_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+portal\s+server\s+is\s+up\.\s*\(IP:<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RDS-RDACCTDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RADIUS\s+accounting\s+server\s+\(\s+IP:<_hostIpAddr:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RDS-RDACCTUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RADIUS\s+accounting\s+server\s+\(\s+IP:<_hostIpAddr:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RDS-RDAUTHDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RADIUS\s+authentication\s+server\s+\(\s+IP:<_hostIpAddr:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RDS-RDAUTHUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RADIUS\s+authentication\s+server\s+\(\s+IP:<_hostIpAddr:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RIP-ADD_RTE_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Because\s+of\s+unsuccessful\s+validation,\s+routes\s+not\s+added\s+to\s+database\.\s+Total<:gPatMesgBodyMin>\s+occurrences\s+since\s+<:gPatMesgBodyMin>\s+<:gPatMesgBodyMin>\.\s*\(Destination=<:gPatStr>/<:gPatMesgBodyMin>,\s*Interface=<intfName:gPatStr>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-DEL_SAMEADDR_PEER_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Deleted\s+the\s+peer\s+<:gPatStr>\s+configuration\s+with\s+the\s+same\s+address\s+as\s+the\s+local\s+interface\.\s+\(ProcessId=<procId:gPatStr>,\s+Interface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-FREEZE_ENTER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+routes\s+on\s+RIP\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-FREEZE_RECOVER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+routes\s+reached\s+the\s+lower\s+threshold,\s+and\s+thus\s+RIP\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_ABORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Aborted\s+Graceful\s+Restart\.\s+\(AbortReason=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_ENTER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Entering\s+Graceful\s+Restart\s+mode\.\s+\(Mode=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_ENTER_HELPER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Entering\s+helper\s+mode\s+for\s+restarting\s+neighbor\s+<:gPatStr>\s+for<:gPatMesgBodyMin>\s+seconds\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_EXIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Exiting\s+Graceful\s+Restart\s+mode\.\s+\(Mode=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_EXIT_HELPER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Exiting\s+helper\s+mode\s+for\s+restarting\s+neighbor\s+<:gPatStr>\.\s*\(Reason=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_EXIT_RT_UPDT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Exiting\s+route\s+update\s+phase\.\s+\(Reason=<:gPatMesgBodyMin>,\s+ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_RCV_ABORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Received\s+abort\s+notification\s+from\s+helper\s+<:gPatStr>\s+on\s+interface<intfName:gPatStr>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_SND_ABORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Sending\s+abort\s+notification\s+to\s+neighbor\s+<:gPatStr>\s+on\s+interface<intfName:gPatStr>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-GR_TOPO_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Detected\s+topology\s+change\s+on\s+interface\s+<intfName:gPatStr>\.\s*\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-MAX_LOGIF_REACH_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+supported\s+logical\s+interfaces\s+reached\s+the\s+maximum\s+value\.\s+Total\s+<:gPatMesgBodyMin>\s+occurrences\s+since\s+<:gPatMesgBodyMin>\s+<:gPatMesgBodyMin>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-RIP_NBR_ADD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RIP\s+neighbor\s+is\s+added\s+on\s+the\s+interface\.\s+\(ProcessId=<procId:gPatStr>,\s*Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIP-RIP_NBR_DEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RIP\s+Neighbor\s+is\s+deleted\s+from\s+the\s+interface\.\s+\(ProcessId=<procId:gPatStr>,\s*Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-FREEZE_ENTER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+routes\s+on\s+RIPng\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-FREEZE_RECOVER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+routes\s+reached\s+the\s+lower\s+threshold,\s+and\s+thus\s+RIPng\s+process\s+<procId:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-INVLD_IF_MTU_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RIPng\s+could\s+not\s+run\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-IPV6_DISAB_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IPv6\s+was\s+not\s+enabled\s+globally\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-MAX_LOGIF_REACH_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+RIPng\s+configurable\s+logical\s+interfaces\s+reached\s+the\s+maximum\s+value\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-RIPNG_NBR_ADD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RIPng\s+neighbor\s+is\s+added\s+on\s+the\s+interface\.\s*\(ProcessId=<procId:gPatStr>,\s+Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-RIPNG_NBR_DEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RIPng\s+neighbor\s+is\s+deleted\s+from\s+the\s+interface\.\s*\(ProcessId=<procId:gPatStr>,\s+Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RIPNG-NO_GLO_SITE_ADDR_F'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Specific\s+request\s+is\s+dropped,\s+because\s+global\s+or\s+site-local\s+address\s+is\s+not\s+assigned\s+for\s+interface\s+<intfName:gPatStr>\.\s+\(ProcessId=<procId:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-CONFIRM_N'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+operation\s+of\s+<opName:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-CONFIRM_TIMEOUT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+operation\s+of\s+<opName:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-CONFIRM_Y'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+operation\s+of\s+<opName:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-HANDLE_ADD_IPMSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+IM\s+received\s+the\s+event\s+of\s+adding\s+an\s+IP\s+address\.\s*\(IpAddress=<_hostIpAddr:gPatStr>,\s+Mask=<netmask:gPatStr>,\s+Interface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RM-HANDLE_ADDED_IPMSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+IM\s+processed\s+the\s+event\s+of\s+adding\s+an\s+IP\s+address\s+successfully\.\s+\(IpAddress=<_hostIpAddr:gPatStr>,\s+Mask=<netmask:gPatStr>,\s+Interface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RM-HANDLE_DEL_IPMSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+IM\s+received\s+the\s+event\s+of\s+deleting\s+an\s+IP\s+address\.\s*\(IpAddress=<_hostIpAddr:gPatStr>,\s+Mask=<netmask:gPatStr>,\s+Interface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RM-HANDLE_DELED_IPMSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+IM\s+processed\s+the\s+event\s+of\s+deleting\s+an\s+IP\s+address\s+successfully\.\s+\(IpAddress=<_hostIpAddr:gPatStr>,\s+Mask=<netmask:gPatStr>,\s+Interface=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-RM-LDP_SESSION_STATE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+received\s+the\s+status\s+<:gPatMesgBodyMin>\s+of\s+the\s+LDP\s+session\s+on\s+the\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-LMTNUM_BGER_MAXPAF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+rejected\s+the\s+setting\s+of\s+routing\s+table\s+limit\s+for\s+instance\s+\(ID\)\s+<:gPatMesgBodyMin>\s+because\s+the\s+limit\s+number\s+<:gPatMesgBodyMin>\s+was\s+greater\s+than\s+the\s+maximum\s+route\s+limit\s+defined\s+in\s+PAF\s+<:gPatMesgBodyMin>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-NOTIFY_ISIS_MSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+notified\s+ISIS\s+of\s+the\s+status\s+<:gPatMesgBodyMin>\s+of\s+the\s+LDP\s+session\s+on\s+the\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-NOTIFY_OSPF_MSG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RM\s+notified\s+OSPF\s+of\s+the\s+status\s+<:gPatMesgBodyMin>\s+of\s+the\s+LDP\s+session\s+on\s+the\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RM-PTCL_ADD_RT_MEM_SHT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+memory\s+was\s+insufficient\s+when\s+a\s+specified\s+route\s+was\s+added\s+to\s+the\s+routing\s+table\s+according\s+to\s+the\s+protocol\s+ID\s+<:gPatMesgBodyMin>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RRPP-PBLK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Domain\s+<:gPatMesgBodyMin>\s+ring\s+<:gPatMesgBodyMin>\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RRPP-PFWD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Domain\s+<:gPatMesgBodyMin>\s+ring\s+<:gPatMesgBodyMin>\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-ENABLE_INTF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^RSVP\s+TE\s+was\s+enabled\s+successfully\s+on\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-GR_AGING_TIMER_END'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+GR\s+aging\s+timer\s+expired\.\s*\(InterfaceName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-INC_INTF'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+obtain\s+interface\s+from\s+RSVP\s+message\.\s*\(IncomingInterfaceIndex=<:gPatStr>,\s+InterfaceName=<intfName:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-LSP_DOESNOT_EXIST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^LSP\s+did\s+not\s+exist\.\s+\(EgressAddress=<:gPatMesgBodyMin>,\s*SessionId=<sessionId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-LSRID_GET_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+obtain\s+LSR\s+ID\s+from\s+both\s+RRO\s+and\s+CSPF\.\s+\(IngressLsrId=<:gPatMesgBodyMin>,\s+SessionId=<sessionId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-MAX_NBR_REACH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+the\s+neighbours\s+on\s+the\s+interface<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-RSVP-RECONSTRUCT_LSP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Cannot\s+reconstruct\s+RSVP\s+states\s+for\s+LSP\.\s*\(EgressAddress=<:gPatMesgBodyMin>,\s+SessionId=<sessionId:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPMISS'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Attack\s+occurred\.\s*\(AttackType=Arp\s+Miss\s+Attack,\s*SourceInterface=<intfName:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_GLOBLE_SPDLMT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Rate\s+of\s+global\s+arp\s+packets\s+exceeds\s+the\s+limit\.\s*\(SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s+SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_HDADDR_LEN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Invalid\s+hard\s+address\s+length\.\s*\(HardAddressLength=<:gPatMesgBodyMin>,\s+SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s*SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_IF_SPDLMT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Rate\s+of\s+arp\s+packets\s+on\s+interface\s+exceeds\s+the\s+limit\.\s*\(SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s+SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_LENTH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Invalid\s+packet\s+length\.\s*\(PacketLength=<:gPatMesgBodyMin>,\s*SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s*SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_OPTYPE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Invalid\s+packet\s+optype\.\s*\(OperateType=<:gPatMesgBodyMin>,\s+SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s+SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_PROADDR_LEN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Invalid\s+protocol\s+address\s+length\.\s*\(ProAddressLength=<:gPatMesgBodyMin>,\s+SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s*SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_SRC_MAC'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Invalid\s+source\s+mac\s+address\.\s*\(SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s+SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ARPS_DROP_PACKET_VLAN_SPDLMT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Rate\s+of\s+arp\s+packets\s+in\s+vlan\s+exceeds\s+the\s+limit\.\s*\(SourceMAC=<hostMACAddr:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,\s+SourceInterface=<intfName:gPatStr>,\s+Vlan=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-DAI_DROP_PACKET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Not\s+hit\s+the\s+user-bind\s+table\.\s*\(SourceMAC=<hostMACAddr:gPatStr>,\s*SourceIP=<srcIpAddr:gPatIpV4Dot>,\s+SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-GWCONFLICT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Attack\s+occurred\.\s*\(AttackType=Gateway\s+Attack,\s*SourceInterface=<intfName:gPatStr>,\s+SourceMAC=<hostMACAddr:gPatStr>,\s+PVlanID=<hostVLAN:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-ICMP_INTF_RATELIMIT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+rate\s+of\s+ICMP\s+packets\s+on\s+the\s+interface\s+exceeded\s+the\s+limit\.\s*\(SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-IPSG_DROP_PACKET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IP\s+packets,\s*dropped\s+by\s+IPSG\.\s*\(SourceInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-IPSG_TABLE_RESOURCE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Resource\s+for\s+<:gPatMesgBodyMin>\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-MFF_GW_MAC_CHANGED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+MAC\s+address\s+of\s+a\s+gateway\s+changed\.\s*\(IP=<_hostIpAddr:gPatStr>,\s+old\s+MAC=<hostMACAddr:gPatStr>,\s+new\s+MAC=<hostMACAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SECE-PORT_ATTACK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Port\s+attack\s+occurred\.\s*\(Slot=<hwSlot:gPatStr>,\s*SourceAttackInterface=<intfName:gPatStr>,\s+OuterVlan/InnerVlan=<hostVLAN:gPatInt>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-PORT_ATTACK_END'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Auto\s+port-defend\s+stop\.\s*\(SourceAttackInterface=<intfName:gPatStr>,\s+AttackProtocol=<:gPatMesgBodyMin>\),\s+VLAN=<hostVLAN:gPatInt>\)\.The\s+log\s+on\s+other\s+models\s+is\s+SECE/6/PORT_ATTACK_END:Auto\s+port-defend\s+stop\.\s+\(SourceAttackInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-PORT_ATTACK_OCCUR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Auto\s+port-defend\s+started\.\s+\(SourceAttackInterface=<intfName:gPatStr>,\s+AttackProtocol=<:gPatMesgBodyMin>,\s+VLAN=<hostVLAN:gPatInt>\)\.The\s+log\s+on\s+other\s+models\s+is\s+SECE/4/PORT_ATTACK_OCCUR:Auto\s+port-defend\s+started\.\s+\(SourceAttackInterface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-SPECIFY_SIP_ATTACK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+specified\s+source\s+IP\s+address\s+attack\s+occurred\.\s*\(Slot=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_BC_BLOCKED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Broadcast\s+packets\s+are\s+blocked\s+at\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_BC_UNBLOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Broadcast\s+packets\s+are\s+unblocked\s+at\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_IF_NORMAL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_IF_SHUTDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_MC_BLOCKED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Multicast\s+packets\s+are\s+blocked\s+at\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_MC_UNBLOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Multicast\s+packets\s+are\s+unblocked\s+at\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_UC_BLOCKED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Unicast\s+packets\s+are\s+blocked\s+at\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STORMCTRL_UC_UNBLOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Uniccast\s+packets\s+are\s+unblocked\s+at\s+interface\s+<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STRACK_DENY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Some\s+packets\s+are\s+dropped\s+because\s+an\s+attack\s+is\s+detected\.\s*\(Interface=<intfName:gPatStr>,\s+sourceMAC=<hostMACAddr:gPatStr>,\s+sourceIP=<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-STRACK_ERROR_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Interface's\s+status\s+is\s+changed\s+to\s+error-down\s+because\s+an\s+attack\s+is\s+detected\.\s+Interface=<intfName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SECE-USER_ATTACK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+attack\s+occurred\.\s*\(Slot=<hwSlot:gPatStr>,\s*SourceAttackInterface=<intfName:gPatStr>,\s+OuterVlan/InnerVlan=<hostVLAN:gPatInt>]]></regex>
        </collectFieldsByRegex>
      </when>

      <!--
       <189>2016-06-14 08:55:16 ZWWW-ZG-FW-MASTER %%01SEC/5/STREAM(l): In last five minutes connection statistic is: Normal closed = 698393, Unsuccessfully closed = 89776, Policy rejected = 0, Route rejected = 0, Blacklist rejected = 0.
     -->
      <when test="$eventType = 'VRP-SEC-STREAM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[Normal\s+closed\s*=\s*<closedConns:gPatInt>,\s*Unsuccessfully\s+closed\s*=\s*<:gPatInt>,\s*Policy\s+rejected\s*=\s*<_connFailure1:gPatInt>,\s*Route\s+rejected\s*=\s*<_connFailure2:gPatInt>,\s*Blacklist\s+rejected\s*=\s*<_connFailure3:gPatInt>]]></regex>
        </collectFieldsByRegex>
        <setEventAttribute attr="connFailure">add($_connFailure1, $_connFailure2, $_connFailure3)</setEventAttribute>
      </when>

      <when test="$eventType = 'VRP-SEP-CFG_ADD_PORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Added\s+the\s+port\s+to\s+the\s+SEP\s+segment\.\s*\(port\s+name=<devPort:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SEP-CFG_DEL_PORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Deleted\s+the\s+port\s+from\s+the\s+SEP\s+segment\.\s+\(port\s+name=<devPort:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SEP-RCV_CFM_FAULT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SEP\s+receives\s+an\s+error\s+notification\s+from\s+the\s+CFM\.\s+\(SegmentID=<:gPatMesgBodyMin>,\s+Port\s+Name=<devPort:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>


      <when test="$eventType = 'VRP-SHELL-CMDCONFIRM_NOPROMPT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Record\s+command\s+information\.\s+\(Task=<task:gPatStr>,\s*IP=<_hostIpAddr:gPatStr>,\s+User=<user:gPatStr>,\s+Command="<command:gPatMesgBodyMin>"]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SHELL-CMDCONFIRM_RECORD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+being\s+asked\s+whether\s+to\s+execute\s+the\s+command"<command:gPatMesgBodyMin>",\s+the\s+user\s+chose\s+<:gPatMesgBodyMin>\.\s*\(Task=<task:gPatStr>,\s+IP=<_hostIpAddr:gPatStr>,\s+User=<user:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SHELL-CMDCONFIRM_UNIFORMRECORD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Record\s+command\s+information\.\s*\(Task=<task:gPatStr>,\s+IP=<_hostIpAddr:gPatStr>,\s+User=<user:gPatStr>,\s+Command="<command:gPatMesgBodyMin>"]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>


      <when test="$eventType = 'VRP-SHELL-LOGINFAILED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+login\.\s+\(Ip=<_hostIpAddr:gPatStr>,\s+UserName=<user:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SMLK-SMLK_FLUSH_LOG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+tag\s+<:gPatMesgBodyMin>\s+flush\s+packet\s+from\s+port\s+<devPort:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SMLK-SMLK_STATUS_LOG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+state\s+of\s+Smart\s+link\s+group\s+<:gPatMesgBodyMin>\s+changed\s+to\s+<:gPatMesgBodyMin>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNMP-SNMP_CNFM_CHANGEUDPORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+being\s+asked\s+whether\s+to\s+execute\s+the\s+command\s+"<command:gPatMesgBodyMin>"]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNMP-SNMP_SET'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^MIB\s+node\s+set\.\s+\(UserName=<user:gPatStr>,\s+SourceIP=<srcIpAddr:gPatIpV4Dot>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNMP-SNMP_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+login\s+through\s+SNMP\.\s+\(Ip=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(PwId=<:gPatMesgBodyMin>,\s+RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceededthe\s+limit\s+configured\.\s+\(PwId=<:gPatMesgBodyMin>,\s+RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWCHNLBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+PwId=<:gPatMesgBodyMin>,\s+RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWCHNLBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+PwId=<:gPatMesgBodyMin>,\s*RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWCHNLCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(ChannelName=<:gPatMesgBodyMin>,\s+PwId=<:gPatMesgBodyMin>,\s+RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWCHNLCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+PwId=<:gPatMesgBodyMin>,\s*RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(PwId=<:gPatMesgBodyMin>,\s+RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-LDPPWCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(PwId=<:gPatMesgBodyMin>,\s+RemoteIpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTCHNLBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTCHNLBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTCHNLCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTCHNLCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceededthe\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limitconfigured\.\s+\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+alreadyexceeded\s+the\s+limit\s+configured\.\s+\(VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANCHBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANCHCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANCHNLBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upperlimit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANCHNLCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upperlimit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-PORTVLANCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceededthe\s+limit\s+configured\.\s+\(VlanId=<hostVLAN:gPatInt>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQCHNLBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQCHNLCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceededthe\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limitconfigured\.\s+\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQIFBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQIFCHNLBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQIFCHNLCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-QINQIFCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFCHNLBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFCHNLBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFCHNLCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFCHNLCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceededthe\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-SUBIFCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(IfName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCHANNELDENY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+unspecified-channel\s+deny\s+configuration\s+exists\s+inVLAN\s+channel\.\s+\(VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCHNLBDWEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCHNLBDWEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+bandwidth\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+the\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCHNLCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCHNLCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceededthe\s+limit\s+configured\.\s+\(ChannelName=<:gPatMesgBodyMin>,\s+VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCNTEXD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+reached\s+the\s+upper\s+limit\.\s*\(VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SNPG-VLANCNTEXDCFG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+multicast\s+groups\s+has\s+already\s+exceeded\s+thelimit\s+configured\.\s+\(VlanId=<hostVLAN:gPatInt>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-ASYNACCEPTFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+allocate\s+the\s+file\s+describer\s+for\s+the\s+sub\s+socket\s+when\s+accept\s+was\s+called\s+to\s+accept\s+incoming\s+connection\s+request\.\s+\(Time=<:gPatMesgBodyMin>,\s*TaskName=<task:gPatStr>,\s+TaskId=<task:gPatStr>,\s+SocketId=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-CANTGETLSTNSOCK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+obtain\s+the\s+ID\s+of\s+the\s+listening\s+socket\.\s*\(TaskId=<task:gPatStr>,\s+SocketId=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-EXCEEDMAXQLEN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+number\s+of\s+messages\s+in\s+the\s+asynchronous\s+message\s+queue\s+was\s+greater\s+than\s+the\s+message\s+upper\s+limit\.\s+\(Time=<:gPatMesgBodyMin>,\s+TaskName=<task:gPatStr>,\s+TaskId=<task:gPatStr>,\s+SocketId=<:gPatMesgBodyMin>,\s+ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-FGETVPNNAME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+current\s+socket\s+failed\s+to\s+obtain\s+the\s+VPN\s+name\.\s*\(ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-SGETVPNNAME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+current\s+socket\s+succeeded\s+to\s+obtain\s+the\s+VPN\s+name\.\s*\(VPNName=<:gPatMesgBodyMin>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-SO_ACCEPTCFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+error\s+code\s+of\s+SO_Accept\s+was\s+returned\.\s*\(Time=<:gPatMesgBodyMin>,\s+TaskName=<task:gPatStr>,\s+TaskId=<task:gPatStr>,\s+SocketId=<:gPatMesgBodyMin>,\s*ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-SOCKNOTEXIST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+current\s+socket\s+did\s+not\s+exist\.\s+\(TaskName=<task:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SOCKET-VRBSSOCKINFO'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+verbose\s+information\s+about\s+the\s+current\s+socket\s+wasdisplayed\.\s+\(Task=<task:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATCGOVERCURPROTECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+started\s+lithium\s+battery\s+group\s+charge\s+overcurrent\s+protection\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATCGOVERVOLPROTECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+started\s+lithium\s+battery\s+group\s+charge\s+overvoltage\s+protection\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATDGTEMPHIGH'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+discharge\s+temperature\s+of\s+the\s+lithium\s+battery\s+is\s+higher\s+than\s+the\s+threshold\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATDGTEMPHIGHRESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+discharge\s+temperature\s+of\s+the\s+lithium\s+battery\s+restored\s+to\s+the\s+normal\s+range\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATLIFEENDCLEAR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Battery\s+service\s+life\s+expiration\s+recovered\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATINVALID'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Battery\s+is\s+invalid\s+for\s+some\s+reason\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATSUPPLYTIMESHORT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+battery's\s+supply\s+time\s+is\s+below\s+threshold\s+value\.\s+\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATREMAINLOW'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+spare\s+battery\s+power\s+fell\s+below\s+<:gPatMesgBodyMin>%\s+of\s+total\s+power\.\s+\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATREMAINLOWRESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+spare\s+battery\s+power\s+increased\s+to\s+above\s+<:gPatMesgBodyMin>\s+%\s+of\s+total\s+power\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATTEMPDGHIGHPROTECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+started\s+lithium\s+battery\s+single-cell\s+charge\s+overtemperature\s+protection\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATTEMPLOW'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+lithium\s+battery\s+temperature\s+fell\s+below\s+the\s+lower\s+threshold\.\s+\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATTEMPLOWPROTECT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+system\s+started\s+lithium\s+battery\s+under-temperature\s+protection\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-BATTEMPLOWRESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+lithium\s+battery\s+temperature\s+raised\s+above\s+the\s+lower\s+threshold\.\s*\(SlotID=<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-FANEXC'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Fault\s+occurs\s+in\s+the\s+fan\s+in\s+slot\s+<hwSlot:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-FANOK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Fan\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-FANPLGIN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Fan\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-FANPLUGOUT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Fan\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-INOUT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+optical\s+module\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-SRM_LOGID_STARTUP_VERSION'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Load\s+information\s+:\s+The\s+current\s+software\s+version\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-POWEXC'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Power\s+supply\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-POWON'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Power\s+supply\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-POWPLGIN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Power\s+supply\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-POWPULOUT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Power\s+supply\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-TXPOWER_EXCEEDMAJOR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-RXPOWER_EXCEEDMINOR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-RXPOWER_RESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-SFPCATEGORY_UNKNOW'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-RXPOWER_EXCEEDMAJOR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-TXPOWER_EXCEEDMINORR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SRM-TXPOWER_RESUME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Optical\s+module\s+in\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SSH-CMD_USERCHOICE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+deciding\s+whether\s+to\s+run\s+the\s+command\s+<command:gPatMesgBodyMin>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SSH-CMDRECORD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Record\s+command\s+information\.\s+\(Task=<task:gPatStr>,\s+IP=<_hostIpAddr:gPatStr>,\s*User=<user:gPatStr>,\s+Command="<command:gPatMesgBodyMin>"]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SSH-OVERWRITE_FILE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+deciding\s+whether\s+to\s+overwrite\s+the\s+file\s+<fileName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SSH-SFTP_REQ_RECORD'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+SFTP\s+server\s+received\s+an\s+operation\s+request\s+from\s+a\s+client\.\s*\(UserName=<user:gPatStr>,\s+IpAddress=<_hostIpAddr:gPatStr>,]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SSH-SSH_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+login\s+through\s+SSH\.\s+\(IP=<_hostIpAddr:gPatStr>,\s+UserName=<user:gPatStr>,\s*Times=<:gPatMesgBodyMin>,\s+FailedReason=<errReason:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-SSH-UPDATE_PUBLICKEY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^When\s+deciding\s+whether\s+to\s+update\s+the\s+key\s+<:gPatMesgBodyMin>\s+which\s+already\s+existed,\s+the\s+user\s+chose\s+<:gPatMesgBodyMin>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-SW_SNPG-RPC_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+send\s+the\s+configuration\s+to\s+LPU\s+because\s+of\s+the\s+failure\s+ofRPC\.\s+\(Slot=<hwSlot:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMAGING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMCEILING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMDAMP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMPULSE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMREUSE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-ALARMUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^On\s+interface\s+<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TAD-FILTERTIMER'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Filter\s+timer\s+of\s+<:gPatMesgBodyMin>\s+on\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TRUNK-BACKSTATE_CHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+working\s+status\s+of\s+the\s+backup\s+trunk\s+changed\.\s*\(TrunkName=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TRUNK-MEMBER_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+trunk\s+member\s+went\s+Down\.\s*\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TRUNK-MEMBER_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+trunk\s+member\s+went\s+Up\.\s*\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TRUNK-STAT_INACT_TO_ACT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+trunk\s+port\s+changed\s+from\s+inactive\s+to\s+active\.\s*\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TRUNK-TRUNKDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TRUNK-TRUNKUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TUNNEL-HOT_INSERT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IFNET\s+module\s+informs\s+tunnel\s+that\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-TUNNEL-HOT_REMOVE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^IFNET\s+module\s+informs\s+tunnel\s+that\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-UCM-MAXIMUM_HSB_BATCHUPFAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^UserIp:\s+<_hostIpAddr:gPatStr>\s+UserMac:\s+<hostMACAddr:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-VFS-DELETE_LOG_FILE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Succeeded\s+in\s+deleting\s+log\s+file\s+<fileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-DIR_NAME_IS_OCCUPIED'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+directory\s+name\s+<dirName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FAILGETFILELEN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+get\s+file\s+length\.\s+\(FileName=<fileName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_CPY_ALL_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+copy\s+file\s+<srcFileName:gPatStr>\s+to\s+<destFileName:gPatStr>\s+in\s+batches\.\s*\(ErrorCode=<errorNo:gPatInt>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_CPY_ALL_OK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Succeeded\s+in\s+copying\s+file\s+<srcFileName:gPatStr>\s+to\s+<destFileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_CPY_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+Copy\s+file\s+<srcFileName:gPatStr>\s+to\s+<destFileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_CPY_PART_OK'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Partially\s+succeeded\s+in\s+copying\s+file\s+<srcFileName:gPatStr>\s+to\s+<destFileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_NAME_IS_OCCUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Log\s+file\s+name\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_NOT_EXIST'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^File\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_SLOT_PREFIX_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Fail\s+to\s+process\s+slot\s+<hwSlot:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USED_DIR_NAME'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Log\s+file\s+directory\s+name\s+<dirName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USR_CANCEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+<user:gPatStr>\s+cancels\s+the\s+operation\s+of\s+overwriting\s+file\s+<fileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USR_CANCEL_CPY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+<user:gPatStr>\s+cancels\s+the\s+operation\s+of\s+copying\s+file\s+<srcFileName:gPatStr>\s+to\s+<destFileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USR_CANCEL_DEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+<user:gPatStr>\s+cancels\s+the\s+operation\s+of\s+deleting\s+file\s+<fileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USR_CONFIRM'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+<user:gPatStr>\s+confirms\s+the\s+operation\s+of\s+overwriting\s+file\s+<fileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USR_CONFIRM_CPY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+<user:gPatStr>\s+confirms\s+the\s+operation\s+of\s+copying\s+file\s+<srcFileName:gPatStr>\s+to\s+<destFileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILE_USR_CONFIRM_DEL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^User\s+<user:gPatStr>\s+confirms\s+the\s+operation\s+of\s+deleting\s+file\s+<fileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILEACCESS_DENI'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Access\s+to\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILECREATE_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+create\s+<fileName:gPatStr>\.]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILEDELETE_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+delete\s+file\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILEINUSING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+file\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILEOPEN_FAIL'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+open\s+<fileName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-FILEOPEN_MORE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+open\s+<fileName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-PSEMTOOLONG'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+time\s+of\s+file\s+system\s+P\s+semaphore\s+is\s+too\s+long\.\s*\(CallStackInformation=<:gPatMesgBodyMin>,\s+TaskId=<task:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VFS-WRITE_ERR'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Failed\s+to\s+write\s+file\s+to\s+slot\s+<hwSlot:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VRRP-STATEWARNING'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+Router\s+state\s+<:gPatMesgBodyMin>\.\s+\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VRRP-STATEWARNINGEXTEND'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Virtual\s+Router\s+state\s+<:gPatMesgBodyMin>,\s+because\s+of\s+<:gPatMesgBodyMin>\.\s*\(Interface=<intfName:gPatStr>,]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VTRUNK-MEMBER_DOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+trunk\s+member\s+went\s+Down\.\s*\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VTRUNK-MEMBER_UP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+the\s+trunk\s+member\s+went\s+Up\.\s*\(TrunkName=<intfName:gPatStr>,\s+PortName=<devPort:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VTRUNK-TRUNKDOWN'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VTRUNK-TRUNKUP'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+status\s+of\s+interface\s+<intfName:gPatStr>\s]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-VTY-ACL_DENY'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^The\s+TCP\s+request\s+was\s+denied\s+according\s+to\s+ACL\s+rules\.\s*\(IpAddress=<_hostIpAddr:gPatStr>\)]]></regex>
        </collectFieldsByRegex>
        <when test="matches($_hostIpAddr, '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')">
          <setEventAttribute attr="hostIpAddr">$_hostIpAddr</setEventAttribute>
        </when>
      </when>

      <when test="$eventType = 'VRP-DS-DATASYNC_CFGCHANGE'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^OID\s+<oid:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

      <when test="$eventType = 'VRP-CM-USER_OFFLINERESULT'">
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^\[USER_INFO_OFFLINE\]DEVICEMAC:<:gPatStr>;DEVICENAME:<:gPatStr>;USER:<user:gPatStr>]]></regex>
        </collectFieldsByRegex>
      </when>

    </choose>
  </parsingInstructions>
</eventParser>
