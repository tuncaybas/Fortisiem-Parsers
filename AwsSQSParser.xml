<eventParser name="AwsSQSParser">
  <deviceType>
    <Vendor>Amazon</Vendor>
    <Model>AWS SQS</Model>
    <Version>ANY</Version>
  </deviceType>

  <testEvents>
    <testEvent><![CDATA[[AWS_SQS_EVENT_DATA] = {"Message":"{\"AlarmName\":\"Console sign-in Alarm\",\"AlarmDescription\":\"Raises alarms if more than 1 console sign-in occur in 5 minutes\",\"AWSAccountId\":\"111111111111\",\"NewStateValue\":\"ALARM\",\"NewStateReason\":\"Threshold Crossed: 1 out of the last 1 datapoints [2.0 (22/06/21 22:54:00)] was greater than the threshold (1.0) (minimum 1 datapoint for OK -> ALARM transition).\",\"StateChangeTime\":\"2021-06-22T22:59:45.314+0000\",\"Region\":\"US East (Ohio)\",\"AlarmArn\":\"arn:aws:cloudwatch:us-east-2:623885071509:alarm:Console sign-in Alarm\",\"OldStateValue\":\"INSUFFICIENT_DATA\",\"Trigger\":{\"MetricName\":\"ConsoleSigninCount\",\"Namespace\":\"CloudTrailMetrics\",\"StatisticType\":\"Statistic\",\"Statistic\":\"SUM\",\"Unit\":null,\"Dimensions\":[],\"Period\":300,\"EvaluationPeriods\":1,\"ComparisonOperator\":\"GreaterThanThreshold\",\"Threshold\":1.0,\"TreatMissingData\":\"- TreatMissingData:                    missing\",\"EvaluateLowSampleCountPercentile\":\"\"}}","MessageId":"11111111-1111-1111-1111-111111111111","Signature":"hDkjzt35pB7BRyN6I2GmlfTbDS000/z+pQd3N/C2/UTaF1astTK9shcaB9sytmoxsHOJZrlyKabGif54EueUXFJCOQRu/hHAGFiKMxjW7eTNmJUUZE5p62fQvN+dmhyXsMmvLz7B77JmelN8GfrzdJdqjqMu7AZw2sOiCrgrFZdkRtqfFYGDmCGVkZtiWtIXePLiO5fqUc34IxFdW2L7tVnh3ugX1JqS81h9CjyxVhI3nOaq3W10ETNcoDYqDmCaik6Y0s9vPUoekQlb515VUpgYQAoKRpGC2pgaMfmeIQ10JAkICC0R8qfoSo/0pyafDgylTEnFnfSfVyfK2NDyRw==","SignatureVersion":"1","SigningCertURL":"https://sns.us-east-2.amazonaws.com/SimpleNotificationService-010a507c1833636cd94bdb98bd93083a.pem","Subject":"ALARM: \"Console sign-in Alarm\" in US East (Ohio)","Timestamp":"2021-06-22T22:59:45.364Z","TopicArn":"arn:aws:sns:us-east-2:111111111111:ab_CloudWatch_Alarms_Topic","Type":"Notification","UnsubscribeURL":"https://sns.us-east-2.amazonaws.com/?Action=Unsubscribe&SubscriptionArn=arn:aws:sns:us-east-2:111111111111:ab_CloudWatch_Alarms_Topic:11111111-1111-1111-1111-111111111111","phCustId":1,"reptDevIpAddr":"10.10.10.103","reptDevName":"amazon.com"}
]]></testEvent>
  </testEvents>

  <eventFormatRecognizer><![CDATA[\[AWS_SQS_EVENT_DATA\]\s*=\s*\{]]></eventFormatRecognizer>
  <parsingInstructions>
    <switch>
      <case>
        <collectFieldsByRegex src="$_rawmsg">
          <regex><![CDATA[\[AWS_SQS_EVENT_DATA\] = <_body:gPatMesgBody>]]></regex>
        </collectFieldsByRegex>
      </case>
    </switch>
    <setEventAttribute attr="extEventRecvProto">AWS_SQS</setEventAttribute>
    <setEventAttribute attr="eventType">AWS-SQS-Generic-Event</setEventAttribute>
    <collectAndSetAttrByJSON src="$_body">
      <attrKeyMap attr="phCustId" key="phCustId"/>
      <attrKeyMap attr="reptDevIpAddr" key="reptDevIpAddr"/>
      <attrKeyMap attr="reptDevName" key="reptDevName"/>
      <attrKeyMap attr="_msg" key="Message"/>
      <attrKeyMap attr="type" key="Type"/>
      <attrKeyMap attr="topicName" key="TopicArn"/>
      <attrKeyMap attr="_eventTime" key="Timestamp"/>
      <attrKeyMap attr="title" key="Subject"/>
      <attrKeyMap attr="awsEventId" key="MessageId"/>
    </collectAndSetAttrByJSON>

    <when test="exist _eventTime">
      <switch>
        <case>
          <collectFieldsByRegex src="$_eventTime">
            <regex><![CDATA[<_year:gPatYear>-<_mon:gPatMon>-<_day:gPatDay>T<_time:gPatTime><_zone:gPatTimeZone>]]></regex>
          </collectFieldsByRegex>
          <setEventAttribute attr="eventTime">toDateTime($_mon, $_day, $_year, $_time, $_zone)</setEventAttribute>
        </case>
        <default/>
      </switch>
    </when>

    <choose>
      <when test="$type = 'Notification'">
        <when test="exist _msg">
          <collectAndSetAttrByJSON src="$_msg">
            <attrKeyMap attr="alarm" key="AlarmName"/>
            <attrKeyMap attr="alarmArn" key="AlarmArn"/>
            <attrKeyMap attr="description" key="AlarmDescription"/>
            <attrKeyMap attr="accountId" key="AWSAccountId"/>
            <attrKeyMap attr="alarmState" key="NewStateValue"/>
            <attrKeyMap attr="reason" key="NewStateReason"/>
            <attrKeyMap attr="_updateTime" key="StateChangeTime"/>
            <attrKeyMap attr="awsRegion" key="Region"/>
            <attrKeyMap attr="ruleName" key="Trigger.MetricName"/>
            <attrKeyMap attr="namespace" key="Trigger.Namespace"/>
            <attrKeyMap attr="funName" key="Trigger.Statistic"/>
            <attrKeyMap attr="threshold" key="Trigger.Threshold"/>
          </collectAndSetAttrByJSON>
        </when>

        <choose>
          <when test="exist alarm">
            <setEventAttribute attr="eventType">combineMsgId("AWS-SQS-CloudWatchAlarm-", $alarm)</setEventAttribute>
            <setEventAttribute attr="eventType">replaceStringByRegex($eventType, "\s+", "_")</setEventAttribute>
          </when>
          <otherwise>
            <setEventAttribute attr="eventType">AWS-SQS-CloudWatchAlarm-Generic</setEventAttribute>
          </otherwise>
        </choose>

      </when>
      <when test="$_type = 'SubscriptionConfirmation'">
        <setEventAttribute attr="eventType">AWS-SQS-SUBSCRIPTION-CONFIRMATION</setEventAttribute>
        <setEventAttribute attr="eventSeverity">1</setEventAttribute>
      </when>
    </choose>

    <when test="exist _updateTime">
      <switch>
        <case>
          <collectFieldsByRegex src="$_updateTime">
            <!--"StateChangeTime":"2021-06-22T22:59:45.314+0000",-->
            <regex><![CDATA[<_year:gPatYear>-<_mon:gPatMon>-<_day:gPatDay>T<_time:gPatTimeMSec><_zone:gPatTimeZone>]]></regex>
          </collectFieldsByRegex>
          <setEventAttribute attr="eventTime">toDateTime($_mon, $_day, $_year, $_time, $_zone)</setEventAttribute>
        </case>
        <default/>
      </switch>
    </when>

  </parsingInstructions>
</eventParser>
