<eventParser name="KinesisVPCFlowParser">
  <deviceType>
    <Vendor>Amazon</Vendor>
    <Model>AWS Kinesis</Model>
    <Version>ANY</Version>
  </deviceType>

  <testEvents>
    <testEvent><![CDATA[2021-04-27T08:40:50.00Z [FSM-AWSKinesis] 2 311111777194 eni-054c755e644dcf36d 103.114.104.68 172.31.9.216 22898 22717 6 1 40 1619538050 1619538102 REJECT OK]]></testEvent>
    <testEvent><![CDATA[2021-04-27T09:14:45.00Z [FSM-AWSKinesis] 2 311111777194 eni-054c755e644dcf36d 172.31.9.216 222.187.239.109 22 43638 6 3 3996 1619540085 1619540142 ACCEPT OK]]></testEvent>
  </testEvents>

  <eventFormatRecognizer><![CDATA[<:gPatYear>-<:gPatMon>-<:gPatDay>T<:gPatTime>\.\d+Z\s+\[FSM-AWSKinesis\]\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatStr>\s+<:gPatIpAddr>\s+<:gPatIpAddr>\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatInt>\s+<:gPatWord>\s+<:gPatWord>]]></eventFormatRecognizer>

  <parsingInstructions>

    <collectFieldsByRegex src="$_rawmsg">
      <regex><![CDATA[<_year:gPatYear>-<_mon:gPatMon>-<_day:gPatDay>T<_time:gPatTime>\.\d+<_tz:gPatTimeZone>\s+\[FSM-AWSKinesis\]\s+<_body:gPatMesgBody>]]></regex>
    </collectFieldsByRegex>

    <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time,$_tz)</setEventAttribute>
    <setEventAttribute attr="eventType">AWSKinesis-VPC-Flow</setEventAttribute>

    <!-- format defined in https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-logs-default -->
    <!-- log version can be 2,3,4,5 and position fields only exist for that version and lower -->
    <collectAndSetAttrByPos src="$_body" sep=" ">
      <!-- Version 2 log fields -->
      <attrPosMap attr="version" pos="1"/>
      <attrPosMap attr="accountId" pos="2"/>
      <attrPosMap attr="intfName" pos="3"/>
      <attrPosMap attr="srcIpAddr" pos="4"/>
      <attrPosMap attr="destIpAddr" pos="5"/>
      <attrPosMap attr="srcIpPort" pos="6"/>
      <attrPosMap attr="destIpPort" pos="7"/>
      <attrPosMap attr="ipProto" pos="8"/>
      <attrPosMap attr="totPkts64" pos="9"/>
      <attrPosMap attr="totBytes64" pos="10"/>
      <attrPosMap attr="_startEpoch" pos="11"/>
      <attrPosMap attr="_endEpoch" pos="12"/>
      <attrPosMap attr="fwAction" pos="13"/>
      <attrPosMap attr="status" pos="14"/>
    </collectAndSetAttrByPos>
    <when test="$version IN '3,4,5'">
      <collectAndSetAttrByPos src="$_body" sep=" ">
        <!-- Version 3 log fields -->
        <attrPosMap attr="vpcId" pos="15"/>
        <attrPosMap attr="_subnetId" pos="16"/>
        <!-- pending attribute subnetId -->
        <attrPosMap attr="ec2InstanceId" pos="17"/>
        <attrPosMap attr="tcpFlags" pos="18"/>
        <attrPosMap attr="type" pos="19"/>
        <attrPosMap attr="srcIpAddr" pos="20"/>
        <attrPosMap attr="destIpAddr" pos="21"/>
      </collectAndSetAttrByPos>
    </when>
    <when test="$version IN '4,5'">
      <collectAndSetAttrByPos src="$_body" sep=" ">
        <!-- Version 4 log fields -->
        <attrPosMap attr="awsRegion" pos="22"/>
        <attrPosMap attr="hostZoneUri" pos="23"/>
        <!-- pending attribute availabilityZone -->
        <attrPosMap attr="hostLocation" pos="24"/>
        <!-- wavelength or outpost or localzone or - -->
        <attrPosMap attr="_subLocationId" pos="25"/>
      </collectAndSetAttrByPos>
    </when>
    <when test="$version IN '5'">
      <collectAndSetAttrByPos src="$_body" sep=" ">
        <!-- Version 5 log fields -->
        <attrPosMap attr="serviceName" pos="26"/>
        <attrPosMap attr="destServiceName" pos="27"/>
        <attrPosMap attr="direction" pos="28"/>
        <attrPosMap attr="_egressTrafficPath" pos="29"/>
        <!-- only if traffic is egress -->
      </collectAndSetAttrByPos>
    </when>
    <when test="exist fwAction">
      <choose>
        <when test="$fwAction != '-'">
          <setEventAttribute attr="eventType">combineMsgId("AWS_VPC_FLOW_", $fwAction)</setEventAttribute>
        </when>
        <otherwise>
          <setEventAttribute attr="eventType">combineMsgId("AWS_VPC_FLOW_", $status)</setEventAttribute>
        </otherwise>
      </choose>
      <choose>
        <when test="$fwAction = 'ACCEPT'">
          <setEventAttribute attr="eventAction">0</setEventAttribute>
        </when>
        <when test="$fwAction = 'REJECT'">
          <setEventAttribute attr="eventAction">1</setEventAttribute>
        </when>
      </choose>
    </when>

    <when test="exist _endEpoch">
      <setEventAttribute attr="_duration">calculateLatency($_endEpoch, $_startEpoch)</setEventAttribute>
      <setEventAttribute attr="durationMSec">scale($_duration, 1000)</setEventAttribute>
    </when>

  </parsingInstructions>
</eventParser>
