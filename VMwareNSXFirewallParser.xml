<eventParser name="VMwareNSXFirewallParser">
  <deviceType>
    <Vendor>VMware</Vendor>
    <Model>NSX</Model>
    <Version>ANY</Version>
  </deviceType>

  <testEvents>
    <testEvent><![CDATA[<13>1 2021-02-25T17:14:45.151Z server1.example.com FIREWALL_PKTLOG: 86559403 INET TERM 2 OUT TCP RST 172.24.10.108/46510->172.24.10.105/514 4/4 779/172]]></testEvent>
    <testEvent><![CDATA[<13>1 2021-02-25T17:14:45.064Z server1.example.com FIREWALL_PKTLOG: 7428c0ae INET match PASS 2 OUT 52 TCP 172.24.6.132/58392->172.21.1.213/389 SEW]]></testEvent>
    <testEvent><![CDATA[2017-04-11T21:09:59.877Z ESXi_FQDN dfwpktlogs: 50047 INET TERM domain-c1/1001 IN TCP RST 10.1.2.3/33491->10.4.5.6/10001 22/14 7684/1070]]></testEvent>
    <testEvent><![CDATA[2019-01-15T00:34:45.903Z example.com dfwpktlogs: 7c607b29 INET match PASS 1031 OUT 48 TCP 10.172.178.226/32808->23.72.199.234/80 S www.sway.com(11111111-1111-1111-1111-111111111111)]]></testEvent>
    <testEvent><![CDATA[2019-01-15T00:34:46.486Z example.com dfwpktlogs: 7c607b29 INET match PASS 1030 OUT 48 UDP 10.172.178.226/42035->10.172.40.1/53 APP_DNS]]></testEvent>
    <testEvent><![CDATA[<6>2023-05-03T12:59:56.390Z example.com FIREWALL-PKTLOG: ff536024 INET TERM PASS 2 IN UDP 192.168.1.25/63638->239.255.255.250/1900 4/0 812/0]]></testEvent>
  </testEvents>

  <patternDefinitions>
    <pattern name="patLogType"><![CDATA[FIREWALL[-_]PKTLOG|dfwpktlogs]]></pattern>
    <!-- S (SYN), SA (SYN-ACK), A (ACK), P (PUSH), U (URGENT), F (FIN), R (RESET) E (ECN capable), W (CWR Congestion Window Reduced) -->
    <!-- E and W are not standard tcp flags seen in log -->
    <pattern name="patTcpFlags"><![CDATA[(?!APP)[SAPUFREW]+]]></pattern>
  </patternDefinitions>


  <eventFormatRecognizer><![CDATA[^<:gPatSyslogPRI>?<:gPatInt>?\s*<:gPatYear>-<:gPatMon>-<:gPatDay>T<:gPatTime>\.\d+<:gPatTimeZone>?\s+<:gPatHostName>\s+<:patLogType>:\s+]]></eventFormatRecognizer>

  <parsingInstructions>
    <switch>
      <!-- 2017-04-11T21:09:59.877Z ESXi_FQDN dfwpktlogs: -->
      <!-- <13>1 2021-02-25T17:14:45.064Z corp.example.com FIREWALL_PKTLOG: -->
      <case>
        <collectFieldsByRegex src="$_rawmsg">
          <regex><![CDATA[^<:gPatSyslogPRI>?<:gPatInt>?\s*<_year:gPatYear>-<_mon:gPatMon>-<_day:gPatDay>T<_time:gPatTime>\.\d+<_tz:gPatTimeZone>?\s+(?:<reptDevIpAddr:gPatIpAddr>|<reptDevName:gPatHostName>)\s+<:patLogType>:\s+<filter:gPatWord>\s+<_afValue:gPatWord>\s+<type:gPatWord>\s+<_body:gPatMesgBody>]]></regex>
        </collectFieldsByRegex>
      </case>
      <default/>
    </switch>

    <setEventAttribute attr="eventType">VMware-NSX-FW</setEventAttribute>
    <setEventAttribute attr="eventAction">0</setEventAttribute>
    <choose>
      <when test="exist _tz">
        <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time, $_tz)</setEventAttribute>
      </when>
      <otherwise>
        <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time)</setEventAttribute>
      </otherwise>
    </choose>

    <!-- Only match and TERM, the rest are error related -->
    <when test="exist type">
      <setEventAttribute attr="eventType">combineMsgId($eventType,"-", $type)</setEventAttribute>
      <choose>
        <when test="$type = 'TERM'">
          <switch>
            <case>
              <!-- passed TCP TERM (session end) Logs have different fields -->
              <!-- mainrs/1024 OUT TCP RST 192.168.4.3/49627->192.168.4.4/49153 20/16 1718/76308 -->
              <collectAndSetAttrByRegex src="$_body">
                <regex><![CDATA[(?:<fwRule:gPatStr>\/)?<ruleId:gPatInt>\s+<direction:gPatWord>\s+<_proto:gPatWord>\s+(?:<reason:gPatWord>\s+)?<srcIpAddr:gPatIpAddr>\/<srcIpPort:gPatInt>-\><destIpAddr:gPatIpAddr>\/<destIpPort:gPatInt>\s+<recvPkts:gPatInt>\/<sentPkts:gPatInt>\s+<recvBytes:gPatInt>\/<sentBytes:gPatInt>]]></regex>
              </collectAndSetAttrByRegex>
              <setEventAttribute attr="eventType">combineMsgId($eventType, "-SessionEnded")</setEventAttribute>
            </case>
            <default/>
          </switch>
        </when>
        <when test="$type = 'match'">
          <switch>
            <case>
              <!-- Comprises multiple formats TCP,FQDN,Application Logs -->
              <!-- PASS 1031 OUT 48 TCP 10.172.178.226/32808->23.72.199.234/80 S www.sway.com(11111111-1111-1111-1111-111111111111) -->
              <collectAndSetAttrByRegex src="$_body">
                <regex><![CDATA[<fwAction:gPatWord>\s+(?:<fwRule:gPatStr>\/)?<ruleId:gPatInt>\s+<direction:gPatWord>\s+<_pktSize:gPatInt>\s+(?:PROTO\s<ipProto:gPatInt>\s+|<_proto:gPatWord>\s+)<srcIpAddr:gPatIpAddr>\/<srcIpPort:gPatInt>-\><destIpAddr:gPatIpAddr>\/<destIpPort:gPatInt>(?:\s+<flag:patTcpFlags>)?(?:\s+APP_<appName:gPatStr>|\s+<destDomain:gPatStr>\(<uuid:gPatStr>\))?]]></regex>
              </collectAndSetAttrByRegex>
            </case>
            <default/>
          </switch>
        </when>
        <otherwise>
          <!-- Some other type occurred indicating an error e.g. SpoofGuard -->
          <switch>
            <case>
              <collectAndSetAttrByRegex src="$_body">
                <regex><![CDATA[<fwAction:gPatWord>\s+(?:<fwRule:gPatStr>\/)?<ruleId:gPatInt>\s+<direction:gPatWord>\s+<_pktSize:gPatInt>\s+(?:PROTO\s<ipProto:gPatInt>\s+|<_proto:gPatWord>\s+)<srcIpAddr:gPatIpAddr>\/<srcIpPort:gPatInt>-\><destIpAddr:gPatIpAddr>\/<destIpPort:gPatInt>]]></regex>
              </collectAndSetAttrByRegex>
            </case>
            <default/>
          </switch>
        </otherwise>
      </choose>
    </when>

    <!-- append fw action if it exists -->
    <when test="exist fwAction">
      <setEventAttribute attr="eventType">combineMsgId($eventType, "-", $fwAction)</setEventAttribute>
      <when test="$fwAction != 'PASS'">
        <setEventAttribute attr="eventAction">1</setEventAttribute>
      </when>
    </when>

    <when test="exist _afValue">
      <choose>
        <when test="$_afValue = 'INET6'">
          <setEventAttribute attr="ipVersion">6</setEventAttribute>
        </when>
        <otherwise>
          <setEventAttribute attr="ipVersion">4</setEventAttribute>
        </otherwise>
      </choose>
    </when>

  </parsingInstructions>
</eventParser>

