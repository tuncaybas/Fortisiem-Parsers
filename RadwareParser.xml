<eventParser name="RadwareParser">
  <deviceType>
    <Vendor>Radware</Vendor>
    <Model>DefensePro</Model>
    <Version>ANY</Version>
  </deviceType>

  <testEvents>
    <testEvent><![CDATA[<132>DefensePro: 13-09-2017 15:03:21 WARNING 12572 Intrusions "SIP-Scanner-SIPVicious" UDP 1.1.1.1 29992 1.1.1.2 5060 15 Regular "GSN_Web" occur 1 3 N/A 0 N/A high drop 11111111-1111-1111-1111-111111111111]]></testEvent>
    <testEvent><![CDATA[<132>DefensePro: 13-09-2017 15:18:45 WARNING 150 HttpFlood "HTTP Page Flood Attack" TCP 1.1.1.3 0 1.1.1.4 80 0 Regular "President-1.1.1.4" ongoing 100 0 N/A 0 N/A medium forward 11111111-1111-1111-1111-111111111111]]></testEvent>
    <testEvent><![CDATA[<132>DefensePro: 13-09-2017 14:37:53 WARNING 200000 SynFlood "SYN Flood HTTP" TCP 0.0.0.0 0 1.1.1.5 80 0 Regular "GSN_Web" ongoing 1 0 N/A 0 N/A medium challenge 11111111-1111-1111-1111-111111111111]]></testEvent>
    <testEvent><![CDATA[<134>DefensePro: 13-09-2017 13:56:34 INFO Configuration Auditing manage syslog destinations create 172.16.10.207 -f "Local Use 0", ACTION: Create by user public via SNMP source IP 1.1.1.6]]></testEvent>
  </testEvents>

  <eventFormatRecognizer><![CDATA[^\s*<:gPatSyslogPRI>?DefensePro:\s+<:gPatMonNum>-<:gPatDay>-<:gPatYear>\s+<:gPatTime>\s+<:gPatWord>\s]]></eventFormatRecognizer>

  <parsingInstructions>
    <collectFieldsByRegex src="$_rawmsg">
      <regex><![CDATA[^\s*<:gPatSyslogPRI>?DefensePro:\s+<_mon:gPatMonNum>-<_day:gPatDay>-<_year:gPatYear>\s+<_time:gPatTime>\s+<_sev:gPatWord>\s+<_body:gPatMesgBody>]]></regex>
    </collectFieldsByRegex>

    <setEventAttribute attr="eventType">Radware-DefensePro-Generic</setEventAttribute>
    <choose>
      <when test="$_sev = 'WARNING'">
        <setEventAttribute attr="eventSeverity">5</setEventAttribute>
      </when>
      <when test="$_sev = 'ERROR'">
        <setEventAttribute attr="eventSeverity">9</setEventAttribute>
      </when>
      <when test="$_sev = 'FATAL'">
        <setEventAttribute attr="eventSeverity">10</setEventAttribute>
      </when>
    </choose>

    <switch>
      <case>
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^<_id:gPatInt>\s+<_body:gPatMesgBody>]]></regex>
        </collectFieldsByRegex>

        <collectAndSetAttrByPosWithQuotes src="$_body" sep=" " quo="&quot;">
          <attrPosMap attr="_eventType" pos="1"/>
          <attrPosMap attr="attackName" pos="2"/>
          <attrPosMap attr="_proto" pos="3"/>
          <attrPosMap attr="srcIpAddr" pos="4"/>
          <attrPosMap attr="srcIpPort" pos="5"/>
          <attrPosMap attr="destIpAddr" pos="6"/>
          <attrPosMap attr="destIpPort" pos="7"/>
          <attrPosMap attr="policyName" pos="10"/>
          <attrPosMap attr="status" pos="11"/>
          <attrPosMap attr="totPkts64" pos="12"/>
          <attrPosMap attr="_severity" pos="17"/>
          <attrPosMap attr="fwAction" pos="18"/>
        </collectAndSetAttrByPosWithQuotes>

        <setEventAttribute attr="_eventType">replaceStringByRegex($attackName, "[ -]+", "_")</setEventAttribute>
        <setEventAttribute attr="eventType">combineMsgId("Radware-DefensePro-", $_id, "-", $_eventType)</setEventAttribute>
        <setEventAttribute attr="ipProto">convertStrToIntIpProto($_proto)</setEventAttribute>

        <choose>
          <when test="not_exist _severity"/>
          <when test="$_severity = 'medium'">
            <setEventAttribute attr="eventSeverity">5</setEventAttribute>
          </when>
          <when test="$_severity = 'high'">
            <setEventAttribute attr="eventSeverity">9</setEventAttribute>
          </when>
        </choose>
      </case>

      <case>
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Configuration Auditing manage syslog destinations create <destIpAddr:gPatIpAddr>]]></regex>
        </collectFieldsByRegex>
        <setEventAttribute attr="eventType">Radware-DefensePro-Config_Audit</setEventAttribute>
      </case>

      <case>
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^Login failed for user <user:gPatMesgBodyMin> via telnet \(IP: <srcIpAddr:gPatIpAddr>\)]]></regex>
        </collectFieldsByRegex>
        <setEventAttribute attr="eventType">Radware-DefensePro-Login_Failure</setEventAttribute>
      </case>

      <case>
        <collectFieldsByRegex src="$_body">
          <regex><![CDATA[^All fans are operational\b]]></regex>
        </collectFieldsByRegex>
        <setEventAttribute attr="eventType">Radware-DefensePro-Fan_Operational</setEventAttribute>
      </case>

      <default/>
    </switch>
  </parsingInstructions>
</eventParser>
