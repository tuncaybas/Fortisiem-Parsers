<eventParser name="MicrosoftAzureEntraParser">
  <deviceType>
    <Vendor>Microsoft</Vendor>
    <Model>Entra</Model>
    <Version>ANY</Version>
  </deviceType>

  <!-- All of these events are streamed to an Azure Event Hub using the Diagnostic settings in the Azure Entra ID portal -->
  <!-- FortiSIEM credential type is Microsoft Azure Event Hub -->
  <testEvents>
    <testEvent><![CDATA[MS_EVENT_HUB eventHubName=xxxx event={"Level":4,"category":"ManagedIdentitySignInLogs","correlationId":"1234-1111-44f1-ba1d-a35c2b991edc","durationMs":0,"operationName":"Sign-in activity","operationVersion":"1.0","phCustId":1,"properties":{"appId":"bbbbbcc111-7b6e-4cf4-91c3-2f1e289b67de","appServicePrincipalId":null,"appliedConditionalAccessPolicies":[],"authenticationProcessingDetails":[],"authenticationProtocol":"none","clientCredentialType":"none","conditionalAccessAudiences":[],"conditionalAccessStatus":"notApplied","correlationId":"1234-1111-44f1-ba1d-a35c2b991edc","createdDateTime":"2025-03-06T05:57:12.8268625+00:00","crossTenantAccessType":"none","federatedCredentialId":"","flaggedForReview":false,"id":"11111111-1111-1111-1111-111111111111","incomingTokenType":"none","ipAddress":"","isInteractive":false,"isTenantRestricted":false,"isThroughGlobalSecureAccess":false,"location":{"city":"","countryOrRegion":"","geoCoordinates":{"latitude":0.0,"longitude":0.0},"state":""},"originalTransferMethod":"none","processingTimeInMilliseconds":0,"resourceDisplayName":"Azure Resource Manager","resourceId":"1234555-ba00-4fd7-ba43-dac1f8f63013","resourceServicePrincipalId":"aaabb12-a52c-47d4-a18a-3d82a325d22f","riskDetail":"none","riskLevelAggregated":"low","riskLevelDuringSignIn":"low","riskState":"none","servicePrincipalId":"11111111-1111-1111-1111-111111111111","servicePrincipalName":"sdclncus-sdfw-w3kshear3gxho","signInTokenProtectionStatus":"none","status":{"errorCode":0},"tokenIssuerType":"AzureAD","uniqueTokenIdentifier":"k-RxgW521UOTSs_-7iVEAA","userId":null},"reptDevIpAddr":"20.70.246.20","reptDevName":"azure.com","resourceId":"/tenants/11111111-1111-1111-1111-111111111111/providers/Microsoft.aadiam","resultSignature":"None","resultType":"0","tenantId":"11111111-1111-1111-1111-111111111111","time":"2025-03-06T05:59:28.6728743Z"}]]></testEvent>
    <testEvent><![CDATA[MS_EVENT_HUB eventHubName=xxxx event={"Level":4,"callerIpAddress":"1.1.1.1","category":"NonInteractiveUserSignInLogs","correlationId":"5111111-58e7-4222-8bc5-33333331","durationMs":0,"identity":"Example User","location":"US","operationName":"Sign-in activity","operationVersion":"1.0","phCustId":1,"properties":{"appDisplayName":"Azure Portal","appId":"c12345-1111-2222-b47d-974e532af3c","appOwnerTenantId":"11111111-1111-1111-1111-111111111111","appServicePrincipalId":null,"appliedConditionalAccessPolicies":[{"conditionsNotSatisfied":0,"conditionsSatisfied":0,"displayName":"mfa every 1 hour saml test-lab","enforcedGrantControls":[],"enforcedSessionControls":[],"id":"91b830db-d321-2222-b1a0-111111096","result":"notEnabled"},{"conditionsNotSatisfied":0,"conditionsSatisfied":0,"displayName":"Microsoft-managed: Multifactor authentication for per-user multifactor authentication users","enforcedGrantControls":[],"enforcedSessionControls":[],"id":"11111111-1111-1111-1111-111111111111","result":"notEnabled"},{"conditionsNotSatisfied":0,"conditionsSatisfied":0,"displayName":"MIS-FortiSASE-Sessiontimeout","enforcedGrantControls":[],"enforcedSessionControls":[],"id":"11111111-1111-1111-1111-111111111111","result":"notEnabled"},{"conditionsNotSatisfied":1,"conditionsSatisfied":0,"displayName":"mfa_and_hybrid","enforcedGrantControls":["Mfa","RequireDomainJoinedDevice"],"enforcedSessionControls":[],"id":"11111111-1111-1111-1111-111111111111","result":"reportOnlyNotApplied"},{"conditionsNotSatisfied":2,"conditionsSatisfied":1,"displayName":"PersistBowserSession","enforcedGrantControls":[],"enforcedSessionControls":["PersistentBrowserSessionMode"],"id":"11111111-1111-1111-1111-111111111111","result":"reportOnlyNotApplied"},{"conditionsNotSatisfied":96,"conditionsSatisfied":3,"displayName":"RiskeyUserSessions","enforcedGrantControls":[],"enforcedSessionControls":["SignInFrequency"],"id":"11111111-1111-1111-1111-111111111111","result":"reportOnlyNotApplied"}],"authenticationContextClassReferences":[],"authenticationDetails":[],"authenticationProcessingDetails":[{"key":"Legacy TLS (TLS 1.0, 1.1, 3DES)","value":"False"},{"key":"Oauth Scope Info","value":"[\"user_impersonation\"]"},{"key":"Is CAE Token","value":"False"}],"authenticationProtocol":"none","authenticationRequirement":"singleFactorAuthentication","authenticationRequirementPolicies":[],"authenticationStrengths":[],"autonomousSystemNumber":40934,"clientAppUsed":"Browser","clientCredentialType":"none","conditionalAccessAudiences":[{"applicationId":"1234555-ba00-4fd7-ba43-dac1f8f63013","audienceReasons":"none"}],"conditionalAccessStatus":"notApplied","correlationId":"5111111-58e7-4222-8bc5-33333331","createdDateTime":"2025-03-06T17:57:19.5723222+00:00","crossTenantAccessType":"b2bCollaboration","deviceDetail":{"browser":"Edge 133.0.0","deviceId":"{PII Removed}","displayName":"{PII Removed}","operatingSystem":"Windows10","trustType":"Azure AD registered"},"flaggedForReview":false,"homeTenantId":"11111111-1111-1111-1111-111111111111","id":"12345-ec7f-4522-8d40-389212fa5600","incomingTokenType":"none","ipAddress":"1.1.1.1","isInteractive":false,"isTenantRestricted":false,"isThroughGlobalSecureAccess":false,"location":{"city":"Sunnyvale","countryOrRegion":"US","geoCoordinates":{"latitude":37.388599395751953,"longitude":-122.01677703857422},"state":"California"},"mfaDetail":{},"networkLocationDetails":[],"originalRequestId":"12345-ec7f-4522-8d40-389212fa5600","originalTransferMethod":"none","privateLinkDetails":{},"processingTimeInMilliseconds":203,"resourceDisplayName":"Azure Resource Manager","resourceId":"1234555-ba00-4fd7-ba43-dac1f8f63013","resourceOwnerTenantId":"11111111-1111-1111-1111-111111111111","resourceServicePrincipalId":"aaabb12-a52c-47d4-a18a-3d82a325d22f","resourceTenantId":"11111111-1111-1111-1111-111111111111","riskDetail":"none","riskEventTypes":[],"riskEventTypes_v2":[],"riskLevelAggregated":"none","riskLevelDuringSignIn":"none","riskState":"none","rngcStatus":0,"servicePrincipalId":"","sessionId":"11111111-1111-1111-1111-111111111111","sessionLifetimePolicies":[],"signInTokenProtectionStatus":"none","ssoExtensionVersion":"","status":{"additionalDetails":"MFA requirement satisfied by claim in the token","errorCode":0},"tenantId":"11111111-1111-1111-1111-111111111111","tokenIssuerName":"","tokenIssuerType":"AzureAD","tokenProtectionStatusDetails":{"signInSessionStatus":"unbound","signInSessionStatusCode":1008},"uniqueTokenIdentifier":"TPvDwH_sIkWNQDiSEvpWAA","userAgent":"Mozilla/5.0","userDisplayName":"Example User","userId":"8dc333b1-1111-2222-8b36-d4b12343926","userPrincipalName":"exampleuser@example.com","userType":"Guest"},"reptDevIpAddr":"2.2.2.2","reptDevName":"azure.com","resourceId":"/tenants/11111111-1111-1111-1111-111111111111/providers/Microsoft.aadiam","resultSignature":"None","resultType":"0","tenantId":"11111111-1111-1111-1111-111111111111","time":"2025-03-06T18:02:42.1396910Z"}]]></testEvent>
  </testEvents>

  <patternDefinitions>
    <pattern name="patExceptParen"><![CDATA[[^\(\)]+]]></pattern>
    <pattern name="patCategoryList" list="begin"><![CDATA[ServicePrincipalSignInLogs|ManagedIdentitySignInLogs|NonInteractiveUserSignInLogs|MicrosoftGraphActivityLogs|SignInLogs|AuditLogs|]]></pattern>
    <pattern name="patCategoryList" list="continue"><![CDATA[ADFSSignInLogs|RiskyUsers|UserRiskEvents|RiskyServicePrincipals|ServicePrincipalRiskEvents|ProvisioningLogs|]]></pattern>
    <pattern name="patCategoryList" list="end"><![CDATA[NetworkAccessTrafficLogs|EnrichedOffice365AuditLogs|RemoteNetworkHealthLogs|NetworkAccessAlerts|NetworkAccessConnectionEvents]]></pattern>
  </patternDefinitions>
  <!-- Very generic JSON event without a formal header - parsing priority should be very low to prevent mismatch -->
  <!-- "category":"AdvancedHunting-<schema table>" as defined in https://docs.microsoft.com/en-us/microsoft-365/security/defender/advanced-hunting-schema-tables?view=o365-worldwide -->
  <eventFormatRecognizer><![CDATA[^\s*(?:MS_EVENT_HUB eventHubName=\S+ event=)?\{.*"category":"<:patCategoryList>".*\}]]></eventFormatRecognizer>

  <parsingInstructions>
    <switch>
      <case>
        <collectFieldsByRegex src="$_rawmsg">
          <regex><![CDATA[^MS_EVENT_HUB eventHubName=<eventHubName:gPatStr> event=<_body:gPatMesgBody>]]></regex>
        </collectFieldsByRegex>
      </case>
      <default>
        <setEventAttribute attr="_body">$_rawmsg</setEventAttribute>
      </default>
    </switch>

    <!-- attribute mapping -->
    <collectAndSetAttrByJSON src="$_body">
      <!-- general fields -->
      <attrKeyMap attr="categoryType" key="category"/>
      <attrKeyMap attr="opName" key="operationName"/>
      <!-- severity -->
      <attrKeyMap attr="_level" key="Level"/>
      <attrKeyMap attr="srcIpAddr" key="callerIpAddress"/>
      <!-- ID to provide sign-in trail -->
      <attrKeyMap attr="correlationId" key="correlationId"/>
      <!-- duration in ms of transaction -->
      <attrKeyMap attr="durationMSec" key="durationMs"/>
      <!-- The REST API version that's requested by the client -->
      <attrKeyMap attr="_apiVer" key="operationVersion"/>
      <!-- ID of the resource that the service principal signed into -->
      <attrKeyMap attr="resourceId" key="resourceId"/>
      <attrKeyMap attr="tenantId" key="tenantId"/>
      <attrKeyMap attr="_timestamp" key="time"/>
      <!-- The result of the sign-in operation can be Success:0 or Failure:1 -->
      <attrKeyMap attr="resultType" key="resultType"/>
      <!-- Contains the error code, if any, for the sign-in operation -->
      <attrKeyMap attr="errorCode" key="resultSignature"/>
      <!-- Provides the error description for the sign-in operation -->
      <attrKeyMap attr="errReason" key="resultDescription"/>
      <!-- FSM inserted attributes -->
      <attrKeyMap attr="reptDevIpAddr" key="reptDevIpAddr"/>
      <attrKeyMap attr="reptDevName" key="reptDevName"/>
      <!-- various properties of each event type -->
      <attrKeyMap attr="appName" key="properties.appDisplayName"/>
      <attrKeyMap attr="clientAppId" key="properties.appId"/>
      <attrKeyMap attr="principal" key="properties.appServicePrincipalId"/>
      <attrKeyMap attr="policyName" key="properties.appliedConditionalAccessPolicies"/>
      <attrKeyMap attr="statusDetailedReason" key="properties.authenticationProcessingDetails"/>
      <attrKeyMap attr="authenMethod" key="properties.authenticationProtocol"/>
      <attrKeyMap attr="credentialType" key="properties.clientCredentialType"/>
      <attrKeyMap attr="_conditionalAccessAudiences" key="properties.conditionalAccessAudiences"/>
      <attrKeyMap attr="policyStatus" key="properties.conditionalAccessStatus"/>
      <!-- 2025-03-06T05:49:04.4270792+00:00 -->
      <attrKeyMap attr="_createdDateTime" key="properties.createdDateTime"/>
      <attrKeyMap attr="_crossTenantAccessType" key="properties.crossTenantAccessType"/>
      <attrKeyMap attr="isFlagged" key="properties.flaggedForReview"/>
      <!-- should be same as caller -->
      <attrKeyMap attr="srcIpAddr" key="properties.ipAddress"/>
      <attrKeyMap attr="isInteractive" key="properties.isInteractive"/>
      <attrKeyMap attr="_isTenantRestricted" key="properties.isTenantRestricted"/>
      <attrKeyMap attr="_isThroughGlobalSecureAccess" key="properties.isThroughGlobalSecureAccess"/>
      <attrKeyMap attr="srcGeoLatitude" key="properties.location.geoCoordinates.latitude"/>
      <attrKeyMap attr="srcGeoLongitude" key="properties.location.geoCoordinates.longitude"/>
      <attrKeyMap attr="resourceName" key="properties.resourceDisplayName"/>
      <attrKeyMap attr="resourceId" key="properties.resourceId"/>
      <attrKeyMap attr="_resourceServicePrincipalId" key="properties.resourceServicePrincipalId"/>
      <!-- risk related data -->
      <attrKeyMap attr="details" key="properties.riskDetail"/>
      <attrKeyMap attr="threatCategory" key="properties.riskEventTypes_v2"/>
      <attrKeyMap attr="threatLevelOverall" key="properties.riskLevelAggregated"/>
      <attrKeyMap attr="threatLevel" key="properties.riskLevelDuringSignIn"/>
      <attrKeyMap attr="status" key="properties.riskState"/>
      <attrKeyMap attr="userKey" key="properties.servicePrincipalCredentialKeyId"/>
      <!-- ID of the service principal who initiated the sign-in -->
      <attrKeyMap attr="userId" key="properties.servicePrincipalId"/>
      <!-- Service Principal Name of the service principal who initiated the sign-in -->
      <attrKeyMap attr="user" key="properties.servicePrincipalName"/>
      <attrKeyMap attr="protectionStatus" key="properties.signInTokenProtectionStatus"/>
      <!-- other than 0 indicates error -->
      <attrKeyMap attr="errorCode" key="properties.status.errorCode"/>
      <attrKeyMap attr="tokenIssuerType" key="properties.tokenIssuerType"/>
      <attrKeyMap attr="userId" key="properties.userId"/>
      <!-- NonInteractiveUserSignInLogs related property fields -->
      <attrKeyMap attr="srcASNum32" key="properties.autonomousSystemNumber"/>
      <attrKeyMap attr="authenMethod" key="properties.clientAppUsed"/>
      <attrKeyMap attr="httpUserAgent" key="properties.userAgent"/>
      <attrKeyMap attr="identity" key="properties.identity"/>
      <attrKeyMap attr="userFullName" key="properties.userDisplayName"/>
      <attrKeyMap attr="userPrincipalName" key="properties.userPrincipalName"/>
      <attrKeyMap attr="userType" key="properties.userType"/>
      <attrKeyMap attr="mfaAuthenticated" key="properties.mfaDetail"/>
      <!-- MicrosoftGraphActivityLogs properties -->
      <attrKeyMap attr="httpMethod" key="properties.requestMethod"/>
      <attrKeyMap attr="downloadURL" key="properties.requestUri"/>
      <attrKeyMap attr="recvBytes64" key="properties.responseSizeBytes"/>
      <attrKeyMap attr="httpStatusCode" key="properties.responseStatusCode"/>
      <attrKeyMap attr="role" key="properties.roles"/>
      <attrKeyMap attr="scope" key="properties.scopes"/>
      <attrKeyMap attr="providerName" key="properties.identityProvider"/>
      <attrKeyMap attr="identityType" key="properties.C_Idtyp"/>
      <!-- AuditLogs properties -->
      <!-- some log types like AuditLogs just have result -->
      <attrKeyMap attr="_result" key="properties.result"/>
      <attrKeyMap attr="userFullName" key="properties.initiatedBy.user.displayName"/>
      <attrKeyMap attr="userPrincipalName" key="properties.initiatedBy.user.userPrincipalName"/>
      <attrKeyMap attr="srcIpAddr" key="properties.initiatedBy.user.ipAddress"/>
      <attrKeyMap attr="appSubcategory" key="properties.category"/>
      <attrKeyMap attr="type" key="properties.operationType"/>
      <!-- ProvisioningLogs fields -->
      <attrKeyMap attr="action" key="properties.action"/>
      <attrKeyMap attr="propName" key="properties.modifiedProperties[0].displayName"/>
      <attrKeyMap attr="newValue" key="properties.modifiedProperties[0].newValue"/>
      <attrKeyMap attr="oldValue" key="properties.modifiedProperties[0].oldValue"/>
      <attrKeyMap attr="osObjName" key="properties.sourceIdentity.Name"/>
      <attrKeyMap attr="osObjType" key="properties.sourceIdentity.identityType"/>
      <!-- target resources in audit logs -->
      <attrKeyMap attr="targetType" key="properties.targetResources[0].type"/>
      <attrKeyMap attr="targetOsObjName" key="properties.targetResources[0].displayName"/>
      <attrKeyMap attr="applicationIdStr" key="properties.targetResources[0].modifiedProperties.find(displayName='AppId', newValue)"/>
      <attrKeyMap attr="targetDomain" key="properties.targetResources[0].modifiedProperties.find(displayName='PublisherDomain', newValue)"/>
      <attrKeyMap attr="httpUserAgent" key="properties.additionalDetails.find(key='User-Agent', value)"/>
      <attrKeyMap attr="applicationIdStr" key="properties.additionalDetails.find(key='AppId', value)"/>
    </collectAndSetAttrByJSON>

    <when test="exist _timestamp">
      <!-- 2025-03-06T18:02:42.1396910Z -->
      <switch>
        <case>
          <collectFieldsByRegex src="$_timestamp">
            <regex><![CDATA[<_year:gPatYear>-<_mon:gPatMonNum>-<_day:gPatDay>T<_time:gPatTime>(?:\.\d+)?(?:<_tz:gPatTimeZone>)?]]></regex>
          </collectFieldsByRegex>

          <choose>
            <when test="exist _tz">
              <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time, $_tz)</setEventAttribute>
            </when>
            <otherwise>
              <setEventAttribute attr="deviceTime">toDateTime($_mon, $_day, $_year, $_time)</setEventAttribute>
            </otherwise>
          </choose>
        </case>
        <default/>
      </switch>
    </when>

    <!-- Set base event type -->
    <choose>
      <when test="exist categoryType">
        <setEventAttribute attr="eventType">combineMsgId("MS-Entra-", $categoryType)</setEventAttribute>
      </when>
      <otherwise>
        <setEventAttribute attr="eventType">MS-Entra-Generic</setEventAttribute>
      </otherwise>
    </choose>

    <!-- append operation name to event type, but shorten for some types -->
    <choose>
      <when test="not_exist opName"/>
      <when test="$opName = 'Sign-in activity'">
        <setEventAttribute attr="eventType">combineMsgId($eventType, "-Logon")</setEventAttribute>
      </when>
      <otherwise>
        <choose>
          <!-- certain categories of events we skip setting this -->
          <when test="$eventType = 'MS-Entra-AuditLogs'"/>
          <otherwise>
            <setEventAttribute attr="_opNameStripped">replaceStringByRegex($opName, "[\s-:\.]+", "_")</setEventAttribute>
            <setEventAttribute attr="_opNameStripped">trimAttribute($_opNameStripped, "_")</setEventAttribute>
            <setEventAttribute attr="eventType">combineMsgId($eventType, "-", $_opNameStripped)</setEventAttribute>
          </otherwise>
        </choose>
      </otherwise>
    </choose>

    <!-- event type specific handling -->
    <choose>
      <when test="$eventType = 'MS-Entra-MicrosoftGraphActivityLogs-Microsoft_Graph_Activity'">
        <!-- shorten event type -->
        <setEventAttribute attr="eventType">MS-Entra-MicrosoftGraphActivity</setEventAttribute>
        <choose>
          <when test="not_exist httpStatusCode"/>
          <when test="matches($httpStatusCode, '^2\d\d')">
            <setEventAttribute attr="eventType">MS-Entra-MicrosoftGraphActivity-success</setEventAttribute>
          </when>
          <when test="matches($httpStatusCode, '^[345]\d\d')">
            <setEventAttribute attr="eventType">MS-Entra-MicrosoftGraphActivity-failure</setEventAttribute>
          </when>
          <otherwise/>
        </choose>
      </when>
      <when test="$eventType = 'MS-Entra-AuditLogs'">
        <!-- The format for these event types are MS-Entra-AuditLogs-auditCategory-activity -->
        <!-- https://learn.microsoft.com/en-us/entra/identity/monitoring-health/reference-audit-activities -->
        <when test="exist appSubcategory">
          <setEventAttribute attr="eventType">combineMsgId($eventType, "-", $appSubcategory)</setEventAttribute>
        </when>
        <!-- We strip invalid chars from activity definition when appending to event type -->
        <when test="exist opName">
          <setEventAttribute attr="_opNameStripped">replaceStringByRegex($opName, "[\s–:\.]+", "_")</setEventAttribute>
          <!-- if subsequent __ replace with single -->
          <setEventAttribute attr="_opNameStripped">replaceStringByRegex($_opNameStripped, "[_-]+", "_")</setEventAttribute>
          <!-- trim trailing _ -->
          <setEventAttribute attr="_opNameStripped">trimAttribute($_opNameStripped, "_")</setEventAttribute>
          <setEventAttribute attr="eventType">combineMsgId($eventType, "-", $_opNameStripped)</setEventAttribute>
        </when>
        <choose>
          <!-- append success or failure -->
          <when test="exist resultType">
            <setEventAttribute attr="eventType">combineMsgId($eventType, "-", $resultType)</setEventAttribute>
          </when>
          <when test="exist _result">
            <setEventAttribute attr="eventType">combineMsgId($eventType, "-", $_result)</setEventAttribute>
          </when>
        </choose>

        <!-- Shorten long event types -->
        <setEventAttribute attr="eventType">replaceStrInStr($eventType, "Management", "Mgmt")</setEventAttribute>

        <!-- AuditLog specific handling -->
        <choose>
          <when test="not_exist targetType"/>
          <when test="not_exist targetOsObjName"/>
          <when test="$targetType = 'Application'">
            <setEventAttribute attr="appName">$targetOsObjName</setEventAttribute>
          </when>
          <when test="$targetType = 'ServicePrincipal'">
            <setEventAttribute attr="principal">$targetOsObjName</setEventAttribute>
            <setEventAttribute attr="targetUser">$targetOsObjName</setEventAttribute>
            <choose>
              <when test="not_exist identity">
                <setEventAttribute attr="principalType">application</setEventAttribute>
              </when>
              <when test="$identity = 'Managed Service Identity'">
                <setEventAttribute attr="principalType">managed identity</setEventAttribute>
              </when>
              <otherwise>
                <setEventAttribute attr="principalType">application</setEventAttribute>
              </otherwise>
            </choose>
          </when>
        </choose>

      </when>
      <otherwise>
        <choose>
          <!-- Determines operation success or failure for most event types -->
          <when test="not_exist resultType"/>
          <when test="$resultType = '0'">
            <setEventAttribute attr="eventType">combineMsgId($eventType, "-success")</setEventAttribute>
          </when>
          <when test="$resultType IN 'Success,success'">
            <setEventAttribute attr="eventType">combineMsgId($eventType, "-success")</setEventAttribute>
          </when>
          <otherwise>
            <setEventAttribute attr="eventType">combineMsgId($eventType, "-failure")</setEventAttribute>
          </otherwise>
        </choose>
      </otherwise>
    </choose>

    <!-- if user doesnt exist try to normalize from other attributes -->
    <when test="not_exist user">
      <choose>
        <when test="exist userPrincipalName">
          <setEventAttribute attr="user">$userPrincipalName</setEventAttribute>
        </when>
        <when test="exist userId">
          <setEventAttribute attr="user">$userId</setEventAttribute>
        </when>
        <when test="exist userFullName">
          <setEventAttribute attr="user">$userFullName</setEventAttribute>
        </when>
        <when test="exist identity">
          <setEventAttribute attr="user">$identity</setEventAttribute>
        </when>
      </choose>
    </when>

    <!-- handle proto -->
    <when test="exist _proto">
      <setEventAttribute attr="ipProto">convertStrToIntIpProto($_proto)</setEventAttribute>
    </when>

  </parsingInstructions>
</eventParser>
